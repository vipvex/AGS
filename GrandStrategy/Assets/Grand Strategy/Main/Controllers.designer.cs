// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UniRx;
using UnityEngine;


public class TerrainControllerBase : Controller {
    
    private IViewModelManager _TerrainManager;
    
    private TerrainViewModel _Terrain;
    
    private WorldViewModel _World;
    
    private WeatherViewModel _Weather;
    
    [InjectAttribute("Terrain")]
    public IViewModelManager TerrainManager {
        get {
            return _TerrainManager;
        }
        set {
            _TerrainManager = value;
        }
    }
    
    [InjectAttribute("Terrain")]
    public TerrainViewModel Terrain {
        get {
            return _Terrain;
        }
        set {
            _Terrain = value;
        }
    }
    
    [InjectAttribute("World")]
    public WorldViewModel World {
        get {
            return _World;
        }
        set {
            _World = value;
        }
    }
    
    [InjectAttribute("Weather")]
    public WeatherViewModel Weather {
        get {
            return _Weather;
        }
        set {
            _Weather = value;
        }
    }
    
    public System.Collections.Generic.IEnumerable<TerrainViewModel> TerrainViewModels {
        get {
            return TerrainManager.OfType<TerrainViewModel>();
        }
    }
    
    public override void Setup() {
        // This is called when the controller is created
        this.OnEvent<GenerateTerrainCommand>().Subscribe(this.GenerateTerrainHandler);
        this.OnEvent<GenerateChunksCommand>().Subscribe(this.GenerateChunksHandler);
        this.OnEvent<ErosionCommand>().Subscribe(this.ErosionHandler);
        this.EventAggregator.OnViewModelCreated<TerrainViewModel>().Subscribe(this.Initialize);;
        this.EventAggregator.OnViewModelDestroyed<TerrainViewModel>().Subscribe(this.DisposingViewModel);;
    }
    
    public override void Initialize(ViewModel viewModel) {
        base.Initialize(viewModel);
        // This is called when a viewmodel is created
        this.InitializeTerrain(((TerrainViewModel)(viewModel)));
    }
    
    public virtual TerrainViewModel CreateTerrain() {
        return ((TerrainViewModel)(this.Create()));
    }
    
    public override ViewModel CreateEmpty() {
        return new TerrainViewModel(this.EventAggregator);
    }
    
    public virtual void InitializeTerrain(TerrainViewModel viewModel) {
        // This is called when a TerrainViewModel is created
        TerrainManager.Add(viewModel);
    }
    
    public override void DisposingViewModel(ViewModel viewModel) {
        base.DisposingViewModel(viewModel);
        TerrainManager.Remove(viewModel);
    }
    
    public virtual void GenerateTerrain(TerrainViewModel viewModel) {
    }
    
    public virtual void GenerateChunks(TerrainViewModel viewModel) {
    }
    
    public virtual void Erosion(TerrainViewModel viewModel) {
    }
    
    public virtual void GenerateTerrainHandler(GenerateTerrainCommand command) {
        this.GenerateTerrain(command.Sender as TerrainViewModel);
    }
    
    public virtual void GenerateChunksHandler(GenerateChunksCommand command) {
        this.GenerateChunks(command.Sender as TerrainViewModel);
    }
    
    public virtual void ErosionHandler(ErosionCommand command) {
        this.Erosion(command.Sender as TerrainViewModel);
    }
}

public class ResourceControllerBase : Controller {
    
    private IViewModelManager _ResourceManager;
    
    private TerrainViewModel _Terrain;
    
    private WorldViewModel _World;
    
    private WeatherViewModel _Weather;
    
    [InjectAttribute("Resource")]
    public IViewModelManager ResourceManager {
        get {
            return _ResourceManager;
        }
        set {
            _ResourceManager = value;
        }
    }
    
    [InjectAttribute("Terrain")]
    public TerrainViewModel Terrain {
        get {
            return _Terrain;
        }
        set {
            _Terrain = value;
        }
    }
    
    [InjectAttribute("World")]
    public WorldViewModel World {
        get {
            return _World;
        }
        set {
            _World = value;
        }
    }
    
    [InjectAttribute("Weather")]
    public WeatherViewModel Weather {
        get {
            return _Weather;
        }
        set {
            _Weather = value;
        }
    }
    
    public System.Collections.Generic.IEnumerable<ResourceViewModel> ResourceViewModels {
        get {
            return ResourceManager.OfType<ResourceViewModel>();
        }
    }
    
    public override void Setup() {
        // This is called when the controller is created
        this.EventAggregator.OnViewModelCreated<ResourceViewModel>().Subscribe(this.Initialize);;
        this.EventAggregator.OnViewModelDestroyed<ResourceViewModel>().Subscribe(this.DisposingViewModel);;
    }
    
    public override void Initialize(ViewModel viewModel) {
        base.Initialize(viewModel);
        // This is called when a viewmodel is created
        this.InitializeResource(((ResourceViewModel)(viewModel)));
    }
    
    public virtual ResourceViewModel CreateResource() {
        return ((ResourceViewModel)(this.Create()));
    }
    
    public override ViewModel CreateEmpty() {
        return new ResourceViewModel(this.EventAggregator);
    }
    
    public virtual void InitializeResource(ResourceViewModel viewModel) {
        // This is called when a ResourceViewModel is created
        ResourceManager.Add(viewModel);
    }
    
    public override void DisposingViewModel(ViewModel viewModel) {
        base.DisposingViewModel(viewModel);
        ResourceManager.Remove(viewModel);
    }
}

public class WeatherControllerBase : Controller {
    
    private IViewModelManager _WeatherManager;
    
    private TerrainViewModel _Terrain;
    
    private WorldViewModel _World;
    
    private WeatherViewModel _Weather;
    
    [InjectAttribute("Weather")]
    public IViewModelManager WeatherManager {
        get {
            return _WeatherManager;
        }
        set {
            _WeatherManager = value;
        }
    }
    
    [InjectAttribute("Terrain")]
    public TerrainViewModel Terrain {
        get {
            return _Terrain;
        }
        set {
            _Terrain = value;
        }
    }
    
    [InjectAttribute("World")]
    public WorldViewModel World {
        get {
            return _World;
        }
        set {
            _World = value;
        }
    }
    
    [InjectAttribute("Weather")]
    public WeatherViewModel Weather {
        get {
            return _Weather;
        }
        set {
            _Weather = value;
        }
    }
    
    public System.Collections.Generic.IEnumerable<WeatherViewModel> WeatherViewModels {
        get {
            return WeatherManager.OfType<WeatherViewModel>();
        }
    }
    
    public override void Setup() {
        // This is called when the controller is created
        this.EventAggregator.OnViewModelCreated<WeatherViewModel>().Subscribe(this.Initialize);;
        this.EventAggregator.OnViewModelDestroyed<WeatherViewModel>().Subscribe(this.DisposingViewModel);;
    }
    
    public override void Initialize(ViewModel viewModel) {
        base.Initialize(viewModel);
        // This is called when a viewmodel is created
        this.InitializeWeather(((WeatherViewModel)(viewModel)));
    }
    
    public virtual WeatherViewModel CreateWeather() {
        return ((WeatherViewModel)(this.Create()));
    }
    
    public override ViewModel CreateEmpty() {
        return new WeatherViewModel(this.EventAggregator);
    }
    
    public virtual void InitializeWeather(WeatherViewModel viewModel) {
        // This is called when a WeatherViewModel is created
        WeatherManager.Add(viewModel);
    }
    
    public override void DisposingViewModel(ViewModel viewModel) {
        base.DisposingViewModel(viewModel);
        WeatherManager.Remove(viewModel);
    }
}

public class ChunkControllerBase : Controller {
    
    private IViewModelManager _ChunkManager;
    
    private TerrainViewModel _Terrain;
    
    private WorldViewModel _World;
    
    private WeatherViewModel _Weather;
    
    [InjectAttribute("Chunk")]
    public IViewModelManager ChunkManager {
        get {
            return _ChunkManager;
        }
        set {
            _ChunkManager = value;
        }
    }
    
    [InjectAttribute("Terrain")]
    public TerrainViewModel Terrain {
        get {
            return _Terrain;
        }
        set {
            _Terrain = value;
        }
    }
    
    [InjectAttribute("World")]
    public WorldViewModel World {
        get {
            return _World;
        }
        set {
            _World = value;
        }
    }
    
    [InjectAttribute("Weather")]
    public WeatherViewModel Weather {
        get {
            return _Weather;
        }
        set {
            _Weather = value;
        }
    }
    
    public System.Collections.Generic.IEnumerable<ChunkViewModel> ChunkViewModels {
        get {
            return ChunkManager.OfType<ChunkViewModel>();
        }
    }
    
    public override void Setup() {
        // This is called when the controller is created
        this.OnEvent<GenerateChunkCommand>().Subscribe(this.GenerateChunkHandler);
        this.EventAggregator.OnViewModelCreated<ChunkViewModel>().Subscribe(this.Initialize);;
        this.EventAggregator.OnViewModelDestroyed<ChunkViewModel>().Subscribe(this.DisposingViewModel);;
    }
    
    public override void Initialize(ViewModel viewModel) {
        base.Initialize(viewModel);
        // This is called when a viewmodel is created
        this.InitializeChunk(((ChunkViewModel)(viewModel)));
    }
    
    public virtual ChunkViewModel CreateChunk() {
        return ((ChunkViewModel)(this.Create()));
    }
    
    public override ViewModel CreateEmpty() {
        return new ChunkViewModel(this.EventAggregator);
    }
    
    public virtual void InitializeChunk(ChunkViewModel viewModel) {
        // This is called when a ChunkViewModel is created
        ChunkManager.Add(viewModel);
    }
    
    public override void DisposingViewModel(ViewModel viewModel) {
        base.DisposingViewModel(viewModel);
        ChunkManager.Remove(viewModel);
    }
    
    public virtual void GenerateChunk(ChunkViewModel viewModel) {
    }
    
    public virtual void GenerateChunkHandler(GenerateChunkCommand command) {
        this.GenerateChunk(command.Sender as ChunkViewModel);
    }
}

public class WorldControllerBase : Controller {
    
    private IViewModelManager _WorldManager;
    
    private TerrainViewModel _Terrain;
    
    private WorldViewModel _World;
    
    private WeatherViewModel _Weather;
    
    [InjectAttribute("World")]
    public IViewModelManager WorldManager {
        get {
            return _WorldManager;
        }
        set {
            _WorldManager = value;
        }
    }
    
    [InjectAttribute("Terrain")]
    public TerrainViewModel Terrain {
        get {
            return _Terrain;
        }
        set {
            _Terrain = value;
        }
    }
    
    [InjectAttribute("World")]
    public WorldViewModel World {
        get {
            return _World;
        }
        set {
            _World = value;
        }
    }
    
    [InjectAttribute("Weather")]
    public WeatherViewModel Weather {
        get {
            return _Weather;
        }
        set {
            _Weather = value;
        }
    }
    
    public System.Collections.Generic.IEnumerable<WorldViewModel> WorldViewModels {
        get {
            return WorldManager.OfType<WorldViewModel>();
        }
    }
    
    public override void Setup() {
        // This is called when the controller is created
        this.OnEvent<GenerateWorldCommand>().Subscribe(this.GenerateWorldHandler);
        this.EventAggregator.OnViewModelCreated<WorldViewModel>().Subscribe(this.Initialize);;
        this.EventAggregator.OnViewModelDestroyed<WorldViewModel>().Subscribe(this.DisposingViewModel);;
    }
    
    public override void Initialize(ViewModel viewModel) {
        base.Initialize(viewModel);
        // This is called when a viewmodel is created
        this.InitializeWorld(((WorldViewModel)(viewModel)));
    }
    
    public virtual WorldViewModel CreateWorld() {
        return ((WorldViewModel)(this.Create()));
    }
    
    public override ViewModel CreateEmpty() {
        return new WorldViewModel(this.EventAggregator);
    }
    
    public virtual void InitializeWorld(WorldViewModel viewModel) {
        // This is called when a WorldViewModel is created
        WorldManager.Add(viewModel);
    }
    
    public override void DisposingViewModel(ViewModel viewModel) {
        base.DisposingViewModel(viewModel);
        WorldManager.Remove(viewModel);
    }
    
    public virtual void GenerateWorld(WorldViewModel viewModel) {
    }
    
    public virtual void GenerateWorldHandler(GenerateWorldCommand command) {
        this.GenerateWorld(command.Sender as WorldViewModel);
    }
}
