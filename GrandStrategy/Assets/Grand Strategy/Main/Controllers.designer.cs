// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using uFrame.Serialization;
using uFrame.MVVM;
using uFrame.Kernel;
using uFrame.IOC;
using UniRx;


public class TerrainControllerBase : uFrame.MVVM.Controller {
    
    private uFrame.MVVM.IViewModelManager _TerrainViewModelManager;
    
    private TerrainViewModel _Terrain;
    
    private WorldViewModel _World;
    
    private WeatherViewModel _Weather;
    
    [uFrame.IOC.InjectAttribute("Terrain")]
    public uFrame.MVVM.IViewModelManager TerrainViewModelManager {
        get {
            return _TerrainViewModelManager;
        }
        set {
            _TerrainViewModelManager = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("Terrain")]
    public TerrainViewModel Terrain {
        get {
            return _Terrain;
        }
        set {
            _Terrain = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("World")]
    public WorldViewModel World {
        get {
            return _World;
        }
        set {
            _World = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("Weather")]
    public WeatherViewModel Weather {
        get {
            return _Weather;
        }
        set {
            _Weather = value;
        }
    }
    
    public IEnumerable<TerrainViewModel> TerrainViewModels {
        get {
            return TerrainViewModelManager.OfType<TerrainViewModel>();
        }
    }
    
    public override void Setup() {
        base.Setup();
        // This is called when the controller is created
    }
    
    public override void Initialize(uFrame.MVVM.ViewModel viewModel) {
        base.Initialize(viewModel);
        // This is called when a viewmodel is created
        this.InitializeTerrain(((TerrainViewModel)(viewModel)));
    }
    
    public virtual TerrainViewModel CreateTerrain() {
        return ((TerrainViewModel)(this.Create(Guid.NewGuid().ToString())));
    }
    
    public override uFrame.MVVM.ViewModel CreateEmpty() {
        return new TerrainViewModel(this.EventAggregator);
    }
    
    public virtual void InitializeTerrain(TerrainViewModel viewModel) {
        // This is called when a TerrainViewModel is created
        viewModel.GenerateTerrain.Action = this.GenerateTerrainHandler;
        viewModel.GenerateChunks.Action = this.GenerateChunksHandler;
        viewModel.Erosion.Action = this.ErosionHandler;
        TerrainViewModelManager.Add(viewModel);
    }
    
    public override void DisposingViewModel(uFrame.MVVM.ViewModel viewModel) {
        base.DisposingViewModel(viewModel);
        TerrainViewModelManager.Remove(viewModel);
    }
    
    public virtual void GenerateTerrain(TerrainViewModel viewModel) {
    }
    
    public virtual void Erosion(TerrainViewModel viewModel) {
    }
    
    public virtual void GenerateTerrainHandler(GenerateTerrainCommand command) {
        this.GenerateTerrain(command.Sender as TerrainViewModel);
    }
    
    public virtual void GenerateChunksHandler(GenerateChunksCommand command) {
        this.GenerateChunks(command.Sender as TerrainViewModel, command);
    }
    
    public virtual void ErosionHandler(ErosionCommand command) {
        this.Erosion(command.Sender as TerrainViewModel);
    }
    
    public virtual void GenerateChunks(TerrainViewModel viewModel, GenerateChunksCommand arg) {
    }
}

public class ResourceControllerBase : uFrame.MVVM.Controller {
    
    private uFrame.MVVM.IViewModelManager _ResourceViewModelManager;
    
    private TerrainViewModel _Terrain;
    
    private WorldViewModel _World;
    
    private WeatherViewModel _Weather;
    
    [uFrame.IOC.InjectAttribute("Resource")]
    public uFrame.MVVM.IViewModelManager ResourceViewModelManager {
        get {
            return _ResourceViewModelManager;
        }
        set {
            _ResourceViewModelManager = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("Terrain")]
    public TerrainViewModel Terrain {
        get {
            return _Terrain;
        }
        set {
            _Terrain = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("World")]
    public WorldViewModel World {
        get {
            return _World;
        }
        set {
            _World = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("Weather")]
    public WeatherViewModel Weather {
        get {
            return _Weather;
        }
        set {
            _Weather = value;
        }
    }
    
    public IEnumerable<ResourceViewModel> ResourceViewModels {
        get {
            return ResourceViewModelManager.OfType<ResourceViewModel>();
        }
    }
    
    public override void Setup() {
        base.Setup();
        // This is called when the controller is created
    }
    
    public override void Initialize(uFrame.MVVM.ViewModel viewModel) {
        base.Initialize(viewModel);
        // This is called when a viewmodel is created
        this.InitializeResource(((ResourceViewModel)(viewModel)));
    }
    
    public virtual ResourceViewModel CreateResource() {
        return ((ResourceViewModel)(this.Create(Guid.NewGuid().ToString())));
    }
    
    public override uFrame.MVVM.ViewModel CreateEmpty() {
        return new ResourceViewModel(this.EventAggregator);
    }
    
    public virtual void InitializeResource(ResourceViewModel viewModel) {
        // This is called when a ResourceViewModel is created
        ResourceViewModelManager.Add(viewModel);
    }
    
    public override void DisposingViewModel(uFrame.MVVM.ViewModel viewModel) {
        base.DisposingViewModel(viewModel);
        ResourceViewModelManager.Remove(viewModel);
    }
}

public class WeatherControllerBase : uFrame.MVVM.Controller {
    
    private uFrame.MVVM.IViewModelManager _WeatherViewModelManager;
    
    private TerrainViewModel _Terrain;
    
    private WorldViewModel _World;
    
    private WeatherViewModel _Weather;
    
    [uFrame.IOC.InjectAttribute("Weather")]
    public uFrame.MVVM.IViewModelManager WeatherViewModelManager {
        get {
            return _WeatherViewModelManager;
        }
        set {
            _WeatherViewModelManager = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("Terrain")]
    public TerrainViewModel Terrain {
        get {
            return _Terrain;
        }
        set {
            _Terrain = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("World")]
    public WorldViewModel World {
        get {
            return _World;
        }
        set {
            _World = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("Weather")]
    public WeatherViewModel Weather {
        get {
            return _Weather;
        }
        set {
            _Weather = value;
        }
    }
    
    public IEnumerable<WeatherViewModel> WeatherViewModels {
        get {
            return WeatherViewModelManager.OfType<WeatherViewModel>();
        }
    }
    
    public override void Setup() {
        base.Setup();
        // This is called when the controller is created
    }
    
    public override void Initialize(uFrame.MVVM.ViewModel viewModel) {
        base.Initialize(viewModel);
        // This is called when a viewmodel is created
        this.InitializeWeather(((WeatherViewModel)(viewModel)));
    }
    
    public virtual WeatherViewModel CreateWeather() {
        return ((WeatherViewModel)(this.Create(Guid.NewGuid().ToString())));
    }
    
    public override uFrame.MVVM.ViewModel CreateEmpty() {
        return new WeatherViewModel(this.EventAggregator);
    }
    
    public virtual void InitializeWeather(WeatherViewModel viewModel) {
        // This is called when a WeatherViewModel is created
        WeatherViewModelManager.Add(viewModel);
    }
    
    public override void DisposingViewModel(uFrame.MVVM.ViewModel viewModel) {
        base.DisposingViewModel(viewModel);
        WeatherViewModelManager.Remove(viewModel);
    }
}

public class ChunkControllerBase : uFrame.MVVM.Controller {
    
    private uFrame.MVVM.IViewModelManager _ChunkViewModelManager;
    
    private TerrainViewModel _Terrain;
    
    private WorldViewModel _World;
    
    private WeatherViewModel _Weather;
    
    [uFrame.IOC.InjectAttribute("Chunk")]
    public uFrame.MVVM.IViewModelManager ChunkViewModelManager {
        get {
            return _ChunkViewModelManager;
        }
        set {
            _ChunkViewModelManager = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("Terrain")]
    public TerrainViewModel Terrain {
        get {
            return _Terrain;
        }
        set {
            _Terrain = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("World")]
    public WorldViewModel World {
        get {
            return _World;
        }
        set {
            _World = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("Weather")]
    public WeatherViewModel Weather {
        get {
            return _Weather;
        }
        set {
            _Weather = value;
        }
    }
    
    public IEnumerable<ChunkViewModel> ChunkViewModels {
        get {
            return ChunkViewModelManager.OfType<ChunkViewModel>();
        }
    }
    
    public override void Setup() {
        base.Setup();
        // This is called when the controller is created
    }
    
    public override void Initialize(uFrame.MVVM.ViewModel viewModel) {
        base.Initialize(viewModel);
        // This is called when a viewmodel is created
        this.InitializeChunk(((ChunkViewModel)(viewModel)));
    }
    
    public virtual ChunkViewModel CreateChunk() {
        return ((ChunkViewModel)(this.Create(Guid.NewGuid().ToString())));
    }
    
    public override uFrame.MVVM.ViewModel CreateEmpty() {
        return new ChunkViewModel(this.EventAggregator);
    }
    
    public virtual void InitializeChunk(ChunkViewModel viewModel) {
        // This is called when a ChunkViewModel is created
        viewModel.GenerateChunk.Action = this.GenerateChunkHandler;
        ChunkViewModelManager.Add(viewModel);
    }
    
    public override void DisposingViewModel(uFrame.MVVM.ViewModel viewModel) {
        base.DisposingViewModel(viewModel);
        ChunkViewModelManager.Remove(viewModel);
    }
    
    public virtual void GenerateChunk(ChunkViewModel viewModel) {
    }
    
    public virtual void GenerateChunkHandler(GenerateChunkCommand command) {
        this.GenerateChunk(command.Sender as ChunkViewModel);
    }
}

public class WorldControllerBase : uFrame.MVVM.Controller {
    
    private uFrame.MVVM.IViewModelManager _WorldViewModelManager;
    
    private TerrainViewModel _Terrain;
    
    private WorldViewModel _World;
    
    private WeatherViewModel _Weather;
    
    [uFrame.IOC.InjectAttribute("World")]
    public uFrame.MVVM.IViewModelManager WorldViewModelManager {
        get {
            return _WorldViewModelManager;
        }
        set {
            _WorldViewModelManager = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("Terrain")]
    public TerrainViewModel Terrain {
        get {
            return _Terrain;
        }
        set {
            _Terrain = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("World")]
    public WorldViewModel World {
        get {
            return _World;
        }
        set {
            _World = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("Weather")]
    public WeatherViewModel Weather {
        get {
            return _Weather;
        }
        set {
            _Weather = value;
        }
    }
    
    public IEnumerable<WorldViewModel> WorldViewModels {
        get {
            return WorldViewModelManager.OfType<WorldViewModel>();
        }
    }
    
    public override void Setup() {
        base.Setup();
        // This is called when the controller is created
    }
    
    public override void Initialize(uFrame.MVVM.ViewModel viewModel) {
        base.Initialize(viewModel);
        // This is called when a viewmodel is created
        this.InitializeWorld(((WorldViewModel)(viewModel)));
    }
    
    public virtual WorldViewModel CreateWorld() {
        return ((WorldViewModel)(this.Create(Guid.NewGuid().ToString())));
    }
    
    public override uFrame.MVVM.ViewModel CreateEmpty() {
        return new WorldViewModel(this.EventAggregator);
    }
    
    public virtual void InitializeWorld(WorldViewModel viewModel) {
        // This is called when a WorldViewModel is created
        viewModel.GenerateWorld.Action = this.GenerateWorldHandler;
        WorldViewModelManager.Add(viewModel);
    }
    
    public override void DisposingViewModel(uFrame.MVVM.ViewModel viewModel) {
        base.DisposingViewModel(viewModel);
        WorldViewModelManager.Remove(viewModel);
    }
    
    public virtual void GenerateWorld(WorldViewModel viewModel) {
    }
    
    public virtual void GenerateWorldHandler(GenerateWorldCommand command) {
        this.GenerateWorld(command.Sender as WorldViewModel);
        this.Publish(command);
    }
}

public class PlayerControllerBase : uFrame.MVVM.Controller {
    
    private uFrame.MVVM.IViewModelManager _PlayerViewModelManager;
    
    private TerrainViewModel _Terrain;
    
    private WorldViewModel _World;
    
    private WeatherViewModel _Weather;
    
    [uFrame.IOC.InjectAttribute("Player")]
    public uFrame.MVVM.IViewModelManager PlayerViewModelManager {
        get {
            return _PlayerViewModelManager;
        }
        set {
            _PlayerViewModelManager = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("Terrain")]
    public TerrainViewModel Terrain {
        get {
            return _Terrain;
        }
        set {
            _Terrain = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("World")]
    public WorldViewModel World {
        get {
            return _World;
        }
        set {
            _World = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("Weather")]
    public WeatherViewModel Weather {
        get {
            return _Weather;
        }
        set {
            _Weather = value;
        }
    }
    
    public IEnumerable<PlayerViewModel> PlayerViewModels {
        get {
            return PlayerViewModelManager.OfType<PlayerViewModel>();
        }
    }
    
    public override void Setup() {
        base.Setup();
        // This is called when the controller is created
    }
    
    public override void Initialize(uFrame.MVVM.ViewModel viewModel) {
        base.Initialize(viewModel);
        // This is called when a viewmodel is created
        this.InitializePlayer(((PlayerViewModel)(viewModel)));
    }
    
    public virtual PlayerViewModel CreatePlayer() {
        return ((PlayerViewModel)(this.Create(Guid.NewGuid().ToString())));
    }
    
    public override uFrame.MVVM.ViewModel CreateEmpty() {
        return new PlayerViewModel(this.EventAggregator);
    }
    
    public virtual void InitializePlayer(PlayerViewModel viewModel) {
        // This is called when a PlayerViewModel is created
        PlayerViewModelManager.Add(viewModel);
    }
    
    public override void DisposingViewModel(uFrame.MVVM.ViewModel viewModel) {
        base.DisposingViewModel(viewModel);
        PlayerViewModelManager.Remove(viewModel);
    }
}

public class FactionControllerBase : uFrame.MVVM.Controller {
    
    private uFrame.MVVM.IViewModelManager _FactionViewModelManager;
    
    private TerrainViewModel _Terrain;
    
    private WorldViewModel _World;
    
    private WeatherViewModel _Weather;
    
    [uFrame.IOC.InjectAttribute("Faction")]
    public uFrame.MVVM.IViewModelManager FactionViewModelManager {
        get {
            return _FactionViewModelManager;
        }
        set {
            _FactionViewModelManager = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("Terrain")]
    public TerrainViewModel Terrain {
        get {
            return _Terrain;
        }
        set {
            _Terrain = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("World")]
    public WorldViewModel World {
        get {
            return _World;
        }
        set {
            _World = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("Weather")]
    public WeatherViewModel Weather {
        get {
            return _Weather;
        }
        set {
            _Weather = value;
        }
    }
    
    public IEnumerable<FactionViewModel> FactionViewModels {
        get {
            return FactionViewModelManager.OfType<FactionViewModel>();
        }
    }
    
    public override void Setup() {
        base.Setup();
        // This is called when the controller is created
    }
    
    public override void Initialize(uFrame.MVVM.ViewModel viewModel) {
        base.Initialize(viewModel);
        // This is called when a viewmodel is created
        this.InitializeFaction(((FactionViewModel)(viewModel)));
    }
    
    public virtual FactionViewModel CreateFaction() {
        return ((FactionViewModel)(this.Create(Guid.NewGuid().ToString())));
    }
    
    public override uFrame.MVVM.ViewModel CreateEmpty() {
        return new FactionViewModel(this.EventAggregator);
    }
    
    public virtual void InitializeFaction(FactionViewModel viewModel) {
        // This is called when a FactionViewModel is created
        FactionViewModelManager.Add(viewModel);
    }
    
    public override void DisposingViewModel(uFrame.MVVM.ViewModel viewModel) {
        base.DisposingViewModel(viewModel);
        FactionViewModelManager.Remove(viewModel);
    }
}

public class UnitControllerBase : uFrame.MVVM.Controller {
    
    private uFrame.MVVM.IViewModelManager _UnitViewModelManager;
    
    private TerrainViewModel _Terrain;
    
    private WorldViewModel _World;
    
    private WeatherViewModel _Weather;
    
    [uFrame.IOC.InjectAttribute("Unit")]
    public uFrame.MVVM.IViewModelManager UnitViewModelManager {
        get {
            return _UnitViewModelManager;
        }
        set {
            _UnitViewModelManager = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("Terrain")]
    public TerrainViewModel Terrain {
        get {
            return _Terrain;
        }
        set {
            _Terrain = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("World")]
    public WorldViewModel World {
        get {
            return _World;
        }
        set {
            _World = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("Weather")]
    public WeatherViewModel Weather {
        get {
            return _Weather;
        }
        set {
            _Weather = value;
        }
    }
    
    public IEnumerable<UnitViewModel> UnitViewModels {
        get {
            return UnitViewModelManager.OfType<UnitViewModel>();
        }
    }
    
    public override void Setup() {
        base.Setup();
        // This is called when the controller is created
    }
    
    public override void Initialize(uFrame.MVVM.ViewModel viewModel) {
        base.Initialize(viewModel);
        // This is called when a viewmodel is created
        this.InitializeUnit(((UnitViewModel)(viewModel)));
    }
    
    public virtual UnitViewModel CreateUnit() {
        return ((UnitViewModel)(this.Create(Guid.NewGuid().ToString())));
    }
    
    public override uFrame.MVVM.ViewModel CreateEmpty() {
        return new UnitViewModel(this.EventAggregator);
    }
    
    public virtual void InitializeUnit(UnitViewModel viewModel) {
        // This is called when a UnitViewModel is created
        UnitViewModelManager.Add(viewModel);
    }
    
    public override void DisposingViewModel(uFrame.MVVM.ViewModel viewModel) {
        base.DisposingViewModel(viewModel);
        UnitViewModelManager.Remove(viewModel);
    }
}

public class SettlmentControllerBase : uFrame.MVVM.Controller {
    
    private uFrame.MVVM.IViewModelManager _SettlmentViewModelManager;
    
    private TerrainViewModel _Terrain;
    
    private WorldViewModel _World;
    
    private WeatherViewModel _Weather;
    
    [uFrame.IOC.InjectAttribute("Settlment")]
    public uFrame.MVVM.IViewModelManager SettlmentViewModelManager {
        get {
            return _SettlmentViewModelManager;
        }
        set {
            _SettlmentViewModelManager = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("Terrain")]
    public TerrainViewModel Terrain {
        get {
            return _Terrain;
        }
        set {
            _Terrain = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("World")]
    public WorldViewModel World {
        get {
            return _World;
        }
        set {
            _World = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("Weather")]
    public WeatherViewModel Weather {
        get {
            return _Weather;
        }
        set {
            _Weather = value;
        }
    }
    
    public IEnumerable<SettlmentViewModel> SettlmentViewModels {
        get {
            return SettlmentViewModelManager.OfType<SettlmentViewModel>();
        }
    }
    
    public override void Setup() {
        base.Setup();
        // This is called when the controller is created
    }
    
    public override void Initialize(uFrame.MVVM.ViewModel viewModel) {
        base.Initialize(viewModel);
        // This is called when a viewmodel is created
        this.InitializeSettlment(((SettlmentViewModel)(viewModel)));
    }
    
    public virtual SettlmentViewModel CreateSettlment() {
        return ((SettlmentViewModel)(this.Create(Guid.NewGuid().ToString())));
    }
    
    public override uFrame.MVVM.ViewModel CreateEmpty() {
        return new SettlmentViewModel(this.EventAggregator);
    }
    
    public virtual void InitializeSettlment(SettlmentViewModel viewModel) {
        // This is called when a SettlmentViewModel is created
        SettlmentViewModelManager.Add(viewModel);
    }
    
    public override void DisposingViewModel(uFrame.MVVM.ViewModel viewModel) {
        base.DisposingViewModel(viewModel);
        SettlmentViewModelManager.Remove(viewModel);
    }
}

public class StructureControllerBase : uFrame.MVVM.Controller {
    
    private uFrame.MVVM.IViewModelManager _StructureViewModelManager;
    
    private TerrainViewModel _Terrain;
    
    private WorldViewModel _World;
    
    private WeatherViewModel _Weather;
    
    [uFrame.IOC.InjectAttribute("Structure")]
    public uFrame.MVVM.IViewModelManager StructureViewModelManager {
        get {
            return _StructureViewModelManager;
        }
        set {
            _StructureViewModelManager = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("Terrain")]
    public TerrainViewModel Terrain {
        get {
            return _Terrain;
        }
        set {
            _Terrain = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("World")]
    public WorldViewModel World {
        get {
            return _World;
        }
        set {
            _World = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("Weather")]
    public WeatherViewModel Weather {
        get {
            return _Weather;
        }
        set {
            _Weather = value;
        }
    }
    
    public IEnumerable<StructureViewModel> StructureViewModels {
        get {
            return StructureViewModelManager.OfType<StructureViewModel>();
        }
    }
    
    public override void Setup() {
        base.Setup();
        // This is called when the controller is created
    }
    
    public override void Initialize(uFrame.MVVM.ViewModel viewModel) {
        base.Initialize(viewModel);
        // This is called when a viewmodel is created
        this.InitializeStructure(((StructureViewModel)(viewModel)));
    }
    
    public virtual StructureViewModel CreateStructure() {
        return ((StructureViewModel)(this.Create(Guid.NewGuid().ToString())));
    }
    
    public override uFrame.MVVM.ViewModel CreateEmpty() {
        return new StructureViewModel(this.EventAggregator);
    }
    
    public virtual void InitializeStructure(StructureViewModel viewModel) {
        // This is called when a StructureViewModel is created
        StructureViewModelManager.Add(viewModel);
    }
    
    public override void DisposingViewModel(uFrame.MVVM.ViewModel viewModel) {
        base.DisposingViewModel(viewModel);
        StructureViewModelManager.Remove(viewModel);
    }
}

public class HexStructureControllerBase : uFrame.MVVM.Controller {
    
    private uFrame.MVVM.IViewModelManager _HexStructureViewModelManager;
    
    private TerrainViewModel _Terrain;
    
    private WorldViewModel _World;
    
    private WeatherViewModel _Weather;
    
    [uFrame.IOC.InjectAttribute("HexStructure")]
    public uFrame.MVVM.IViewModelManager HexStructureViewModelManager {
        get {
            return _HexStructureViewModelManager;
        }
        set {
            _HexStructureViewModelManager = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("Terrain")]
    public TerrainViewModel Terrain {
        get {
            return _Terrain;
        }
        set {
            _Terrain = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("World")]
    public WorldViewModel World {
        get {
            return _World;
        }
        set {
            _World = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("Weather")]
    public WeatherViewModel Weather {
        get {
            return _Weather;
        }
        set {
            _Weather = value;
        }
    }
    
    public IEnumerable<HexStructureViewModel> HexStructureViewModels {
        get {
            return HexStructureViewModelManager.OfType<HexStructureViewModel>();
        }
    }
    
    public override void Setup() {
        base.Setup();
        // This is called when the controller is created
    }
    
    public override void Initialize(uFrame.MVVM.ViewModel viewModel) {
        base.Initialize(viewModel);
        // This is called when a viewmodel is created
        this.InitializeHexStructure(((HexStructureViewModel)(viewModel)));
    }
    
    public virtual HexStructureViewModel CreateHexStructure() {
        return ((HexStructureViewModel)(this.Create(Guid.NewGuid().ToString())));
    }
    
    public override uFrame.MVVM.ViewModel CreateEmpty() {
        return new HexStructureViewModel(this.EventAggregator);
    }
    
    public virtual void InitializeHexStructure(HexStructureViewModel viewModel) {
        // This is called when a HexStructureViewModel is created
        HexStructureViewModelManager.Add(viewModel);
    }
    
    public override void DisposingViewModel(uFrame.MVVM.ViewModel viewModel) {
        base.DisposingViewModel(viewModel);
        HexStructureViewModelManager.Remove(viewModel);
    }
}

public class GameTimeControllerBase : uFrame.MVVM.Controller {
    
    private uFrame.MVVM.IViewModelManager _GameTimeViewModelManager;
    
    private TerrainViewModel _Terrain;
    
    private WorldViewModel _World;
    
    private WeatherViewModel _Weather;
    
    [uFrame.IOC.InjectAttribute("GameTime")]
    public uFrame.MVVM.IViewModelManager GameTimeViewModelManager {
        get {
            return _GameTimeViewModelManager;
        }
        set {
            _GameTimeViewModelManager = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("Terrain")]
    public TerrainViewModel Terrain {
        get {
            return _Terrain;
        }
        set {
            _Terrain = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("World")]
    public WorldViewModel World {
        get {
            return _World;
        }
        set {
            _World = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("Weather")]
    public WeatherViewModel Weather {
        get {
            return _Weather;
        }
        set {
            _Weather = value;
        }
    }
    
    public IEnumerable<GameTimeViewModel> GameTimeViewModels {
        get {
            return GameTimeViewModelManager.OfType<GameTimeViewModel>();
        }
    }
    
    public override void Setup() {
        base.Setup();
        // This is called when the controller is created
    }
    
    public override void Initialize(uFrame.MVVM.ViewModel viewModel) {
        base.Initialize(viewModel);
        // This is called when a viewmodel is created
        this.InitializeGameTime(((GameTimeViewModel)(viewModel)));
    }
    
    public virtual GameTimeViewModel CreateGameTime() {
        return ((GameTimeViewModel)(this.Create(Guid.NewGuid().ToString())));
    }
    
    public override uFrame.MVVM.ViewModel CreateEmpty() {
        return new GameTimeViewModel(this.EventAggregator);
    }
    
    public virtual void InitializeGameTime(GameTimeViewModel viewModel) {
        // This is called when a GameTimeViewModel is created
        viewModel.IncreaseGameSpeed.Action = this.IncreaseGameSpeedHandler;
        viewModel.DecreaseGameSpeed.Action = this.DecreaseGameSpeedHandler;
        viewModel.TogglePause.Action = this.TogglePauseHandler;
        viewModel.GameTick.Action = this.GameTickHandler;
        GameTimeViewModelManager.Add(viewModel);
    }
    
    public override void DisposingViewModel(uFrame.MVVM.ViewModel viewModel) {
        base.DisposingViewModel(viewModel);
        GameTimeViewModelManager.Remove(viewModel);
    }
    
    public virtual void IncreaseGameSpeed(GameTimeViewModel viewModel) {
    }
    
    public virtual void DecreaseGameSpeed(GameTimeViewModel viewModel) {
    }
    
    public virtual void TogglePause(GameTimeViewModel viewModel) {
    }
    
    public virtual void IncreaseGameSpeedHandler(IncreaseGameSpeedCommand command) {
        this.IncreaseGameSpeed(command.Sender as GameTimeViewModel);
    }
    
    public virtual void DecreaseGameSpeedHandler(DecreaseGameSpeedCommand command) {
        this.DecreaseGameSpeed(command.Sender as GameTimeViewModel);
    }
    
    public virtual void TogglePauseHandler(TogglePauseCommand command) {
        this.TogglePause(command.Sender as GameTimeViewModel);
        this.Publish(command);
    }
    
    public virtual void GameTickHandler(GameTickCommand command) {
        this.GameTick(command.Sender as GameTimeViewModel, command.Argument);
        this.Publish(command);
    }
    
    public virtual void GameTick(GameTimeViewModel viewModel, GameTick arg) {
    }
}

public class GameLogicControllerBase : uFrame.MVVM.Controller {
    
    private uFrame.MVVM.IViewModelManager _GameLogicViewModelManager;
    
    private TerrainViewModel _Terrain;
    
    private WorldViewModel _World;
    
    private WeatherViewModel _Weather;
    
    [uFrame.IOC.InjectAttribute("GameLogic")]
    public uFrame.MVVM.IViewModelManager GameLogicViewModelManager {
        get {
            return _GameLogicViewModelManager;
        }
        set {
            _GameLogicViewModelManager = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("Terrain")]
    public TerrainViewModel Terrain {
        get {
            return _Terrain;
        }
        set {
            _Terrain = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("World")]
    public WorldViewModel World {
        get {
            return _World;
        }
        set {
            _World = value;
        }
    }
    
    [uFrame.IOC.InjectAttribute("Weather")]
    public WeatherViewModel Weather {
        get {
            return _Weather;
        }
        set {
            _Weather = value;
        }
    }
    
    public IEnumerable<GameLogicViewModel> GameLogicViewModels {
        get {
            return GameLogicViewModelManager.OfType<GameLogicViewModel>();
        }
    }
    
    public override void Setup() {
        base.Setup();
        // This is called when the controller is created
    }
    
    public override void Initialize(uFrame.MVVM.ViewModel viewModel) {
        base.Initialize(viewModel);
        // This is called when a viewmodel is created
        this.InitializeGameLogic(((GameLogicViewModel)(viewModel)));
    }
    
    public virtual GameLogicViewModel CreateGameLogic() {
        return ((GameLogicViewModel)(this.Create(Guid.NewGuid().ToString())));
    }
    
    public override uFrame.MVVM.ViewModel CreateEmpty() {
        return new GameLogicViewModel(this.EventAggregator);
    }
    
    public virtual void InitializeGameLogic(GameLogicViewModel viewModel) {
        // This is called when a GameLogicViewModel is created
        viewModel.StartGame.Action = this.StartGameHandler;
        GameLogicViewModelManager.Add(viewModel);
    }
    
    public override void DisposingViewModel(uFrame.MVVM.ViewModel viewModel) {
        base.DisposingViewModel(viewModel);
        GameLogicViewModelManager.Remove(viewModel);
    }
    
    public virtual void StartGame(GameLogicViewModel viewModel) {
    }
    
    public virtual void StartGameHandler(StartGameCommand command) {
        this.StartGame(command.Sender as GameLogicViewModel);
        this.Publish(command);
    }
}
