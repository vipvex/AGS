// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UniRx;


public partial class TerrainViewModelBase : ViewModel {
    
    private P<Int32> _WidthProperty;
    
    private P<Int32> _HeightProperty;
    
    private P<Single> _ElevationsProperty;
    
    private P<Int32> _SeaLevelProperty;
    
    private P<Int32> _SeedProperty;
    
    private P<Boolean> _RandomizedSeedProperty;
    
    private P<Single> _DiamonDetailProperty;
    
    private P<Single> _DiamondVariationProperty;
    
    private P<Int32> _RiverFrequencyProperty;
    
    private P<Int32> _RiverLengthProperty;
    
    private P<Int32> _MountainRangeFrequencyProperty;
    
    private P<Int32> _MountainRangeScaleProperty;
    
    private P<Int32> _MountainSpacingProperty;
    
    private P<ChunkViewModel[,]> _ChunksProperty;
    
    private P<Hex[,]> _HexesProperty;
    
    private P<Int32> _ChunkSizeProperty;
    
    private P<Int32> _HexSideLengthProperty;
    
    private P<Int32> _PixelsPerUnitProperty;
    
    private P<Single[,]> _TerrainHeightsProperty;
    
    private P<Int32> _PixelsToHeightProperty;
    
    private P<Int32> _ErrosionPassesProperty;
    
    private P<Single[,]> _RainfallProperty;
    
    private P<Int32> _RainfallMovementStepsProperty;
    
    private P<Int32> _RainfallNeighborsProperty;
    
    private P<Single> _RiverMinHeightProperty;
    
    private P<Int32> _RiverMinLengthProperty;
    
    private P<Int32> _RiverMaxLengthProperty;
    
    private P<Int32> _LakeMinSizeProperty;
    
    private P<Int32> _SeaMinSizeProperty;
    
    private P<Int32> _ChunkHexCountXProperty;
    
    private P<Int32> _ChunkHexCountYProperty;
    
    private P<Vector3> _CameraPosProperty;
    
    private P<AnimationCurve> _LatitudeTempCurveProperty;
    
    private P<TerrainTypesList> _TerrainTypesListProperty;
    
    private P<AnimationCurve> _AltitudeTempCurveProperty;
    
    private ModelCollection<Hex> _WaterHexes;
    
    private ModelCollection<Hex> _RiverHexes;
    
    private Signal<GenerateTerrainCommand> _GenerateTerrain;
    
    private Signal<GenerateChunksCommand> _GenerateChunks;
    
    private Signal<ErosionCommand> _Erosion;
    
    public TerrainViewModelBase(IEventAggregator aggregator) : 
            base(aggregator) {
    }
    
    public virtual P<Int32> WidthProperty {
        get {
            return _WidthProperty;
        }
        set {
            _WidthProperty = value;
        }
    }
    
    public virtual P<Int32> HeightProperty {
        get {
            return _HeightProperty;
        }
        set {
            _HeightProperty = value;
        }
    }
    
    public virtual P<Single> ElevationsProperty {
        get {
            return _ElevationsProperty;
        }
        set {
            _ElevationsProperty = value;
        }
    }
    
    public virtual P<Int32> SeaLevelProperty {
        get {
            return _SeaLevelProperty;
        }
        set {
            _SeaLevelProperty = value;
        }
    }
    
    public virtual P<Int32> SeedProperty {
        get {
            return _SeedProperty;
        }
        set {
            _SeedProperty = value;
        }
    }
    
    public virtual P<Boolean> RandomizedSeedProperty {
        get {
            return _RandomizedSeedProperty;
        }
        set {
            _RandomizedSeedProperty = value;
        }
    }
    
    public virtual P<Single> DiamonDetailProperty {
        get {
            return _DiamonDetailProperty;
        }
        set {
            _DiamonDetailProperty = value;
        }
    }
    
    public virtual P<Single> DiamondVariationProperty {
        get {
            return _DiamondVariationProperty;
        }
        set {
            _DiamondVariationProperty = value;
        }
    }
    
    public virtual P<Int32> RiverFrequencyProperty {
        get {
            return _RiverFrequencyProperty;
        }
        set {
            _RiverFrequencyProperty = value;
        }
    }
    
    public virtual P<Int32> RiverLengthProperty {
        get {
            return _RiverLengthProperty;
        }
        set {
            _RiverLengthProperty = value;
        }
    }
    
    public virtual P<Int32> MountainRangeFrequencyProperty {
        get {
            return _MountainRangeFrequencyProperty;
        }
        set {
            _MountainRangeFrequencyProperty = value;
        }
    }
    
    public virtual P<Int32> MountainRangeScaleProperty {
        get {
            return _MountainRangeScaleProperty;
        }
        set {
            _MountainRangeScaleProperty = value;
        }
    }
    
    public virtual P<Int32> MountainSpacingProperty {
        get {
            return _MountainSpacingProperty;
        }
        set {
            _MountainSpacingProperty = value;
        }
    }
    
    public virtual P<ChunkViewModel[,]> ChunksProperty {
        get {
            return _ChunksProperty;
        }
        set {
            _ChunksProperty = value;
        }
    }
    
    public virtual P<Hex[,]> HexesProperty {
        get {
            return _HexesProperty;
        }
        set {
            _HexesProperty = value;
        }
    }
    
    public virtual P<Int32> ChunkSizeProperty {
        get {
            return _ChunkSizeProperty;
        }
        set {
            _ChunkSizeProperty = value;
        }
    }
    
    public virtual P<Int32> HexSideLengthProperty {
        get {
            return _HexSideLengthProperty;
        }
        set {
            _HexSideLengthProperty = value;
        }
    }
    
    public virtual P<Int32> PixelsPerUnitProperty {
        get {
            return _PixelsPerUnitProperty;
        }
        set {
            _PixelsPerUnitProperty = value;
        }
    }
    
    public virtual P<Single[,]> TerrainHeightsProperty {
        get {
            return _TerrainHeightsProperty;
        }
        set {
            _TerrainHeightsProperty = value;
        }
    }
    
    public virtual P<Int32> PixelsToHeightProperty {
        get {
            return _PixelsToHeightProperty;
        }
        set {
            _PixelsToHeightProperty = value;
        }
    }
    
    public virtual P<Int32> ErrosionPassesProperty {
        get {
            return _ErrosionPassesProperty;
        }
        set {
            _ErrosionPassesProperty = value;
        }
    }
    
    public virtual P<Single[,]> RainfallProperty {
        get {
            return _RainfallProperty;
        }
        set {
            _RainfallProperty = value;
        }
    }
    
    public virtual P<Int32> RainfallMovementStepsProperty {
        get {
            return _RainfallMovementStepsProperty;
        }
        set {
            _RainfallMovementStepsProperty = value;
        }
    }
    
    public virtual P<Int32> RainfallNeighborsProperty {
        get {
            return _RainfallNeighborsProperty;
        }
        set {
            _RainfallNeighborsProperty = value;
        }
    }
    
    public virtual P<Single> RiverMinHeightProperty {
        get {
            return _RiverMinHeightProperty;
        }
        set {
            _RiverMinHeightProperty = value;
        }
    }
    
    public virtual P<Int32> RiverMinLengthProperty {
        get {
            return _RiverMinLengthProperty;
        }
        set {
            _RiverMinLengthProperty = value;
        }
    }
    
    public virtual P<Int32> RiverMaxLengthProperty {
        get {
            return _RiverMaxLengthProperty;
        }
        set {
            _RiverMaxLengthProperty = value;
        }
    }
    
    public virtual P<Int32> LakeMinSizeProperty {
        get {
            return _LakeMinSizeProperty;
        }
        set {
            _LakeMinSizeProperty = value;
        }
    }
    
    public virtual P<Int32> SeaMinSizeProperty {
        get {
            return _SeaMinSizeProperty;
        }
        set {
            _SeaMinSizeProperty = value;
        }
    }
    
    public virtual P<Int32> ChunkHexCountXProperty {
        get {
            return _ChunkHexCountXProperty;
        }
        set {
            _ChunkHexCountXProperty = value;
        }
    }
    
    public virtual P<Int32> ChunkHexCountYProperty {
        get {
            return _ChunkHexCountYProperty;
        }
        set {
            _ChunkHexCountYProperty = value;
        }
    }
    
    public virtual P<Vector3> CameraPosProperty {
        get {
            return _CameraPosProperty;
        }
        set {
            _CameraPosProperty = value;
        }
    }
    
    public virtual P<AnimationCurve> LatitudeTempCurveProperty {
        get {
            return _LatitudeTempCurveProperty;
        }
        set {
            _LatitudeTempCurveProperty = value;
        }
    }
    
    public virtual P<TerrainTypesList> TerrainTypesListProperty {
        get {
            return _TerrainTypesListProperty;
        }
        set {
            _TerrainTypesListProperty = value;
        }
    }
    
    public virtual P<AnimationCurve> AltitudeTempCurveProperty {
        get {
            return _AltitudeTempCurveProperty;
        }
        set {
            _AltitudeTempCurveProperty = value;
        }
    }
    
    public virtual Int32 Width {
        get {
            return WidthProperty.Value;
        }
        set {
            WidthProperty.Value = value;
        }
    }
    
    public virtual Int32 Height {
        get {
            return HeightProperty.Value;
        }
        set {
            HeightProperty.Value = value;
        }
    }
    
    public virtual Single Elevations {
        get {
            return ElevationsProperty.Value;
        }
        set {
            ElevationsProperty.Value = value;
        }
    }
    
    public virtual Int32 SeaLevel {
        get {
            return SeaLevelProperty.Value;
        }
        set {
            SeaLevelProperty.Value = value;
        }
    }
    
    public virtual Int32 Seed {
        get {
            return SeedProperty.Value;
        }
        set {
            SeedProperty.Value = value;
        }
    }
    
    public virtual Boolean RandomizedSeed {
        get {
            return RandomizedSeedProperty.Value;
        }
        set {
            RandomizedSeedProperty.Value = value;
        }
    }
    
    public virtual Single DiamonDetail {
        get {
            return DiamonDetailProperty.Value;
        }
        set {
            DiamonDetailProperty.Value = value;
        }
    }
    
    public virtual Single DiamondVariation {
        get {
            return DiamondVariationProperty.Value;
        }
        set {
            DiamondVariationProperty.Value = value;
        }
    }
    
    public virtual Int32 RiverFrequency {
        get {
            return RiverFrequencyProperty.Value;
        }
        set {
            RiverFrequencyProperty.Value = value;
        }
    }
    
    public virtual Int32 RiverLength {
        get {
            return RiverLengthProperty.Value;
        }
        set {
            RiverLengthProperty.Value = value;
        }
    }
    
    public virtual Int32 MountainRangeFrequency {
        get {
            return MountainRangeFrequencyProperty.Value;
        }
        set {
            MountainRangeFrequencyProperty.Value = value;
        }
    }
    
    public virtual Int32 MountainRangeScale {
        get {
            return MountainRangeScaleProperty.Value;
        }
        set {
            MountainRangeScaleProperty.Value = value;
        }
    }
    
    public virtual Int32 MountainSpacing {
        get {
            return MountainSpacingProperty.Value;
        }
        set {
            MountainSpacingProperty.Value = value;
        }
    }
    
    public virtual ChunkViewModel[,] Chunks {
        get {
            return ChunksProperty.Value;
        }
        set {
            ChunksProperty.Value = value;
        }
    }
    
    public virtual Hex[,] Hexes {
        get {
            return HexesProperty.Value;
        }
        set {
            HexesProperty.Value = value;
        }
    }
    
    public virtual Int32 ChunkSize {
        get {
            return ChunkSizeProperty.Value;
        }
        set {
            ChunkSizeProperty.Value = value;
        }
    }
    
    public virtual Int32 HexSideLength {
        get {
            return HexSideLengthProperty.Value;
        }
        set {
            HexSideLengthProperty.Value = value;
        }
    }
    
    public virtual Int32 PixelsPerUnit {
        get {
            return PixelsPerUnitProperty.Value;
        }
        set {
            PixelsPerUnitProperty.Value = value;
        }
    }
    
    public virtual Single[,] TerrainHeights {
        get {
            return TerrainHeightsProperty.Value;
        }
        set {
            TerrainHeightsProperty.Value = value;
        }
    }
    
    public virtual Int32 PixelsToHeight {
        get {
            return PixelsToHeightProperty.Value;
        }
        set {
            PixelsToHeightProperty.Value = value;
        }
    }
    
    public virtual Int32 ErrosionPasses {
        get {
            return ErrosionPassesProperty.Value;
        }
        set {
            ErrosionPassesProperty.Value = value;
        }
    }
    
    public virtual Single[,] Rainfall {
        get {
            return RainfallProperty.Value;
        }
        set {
            RainfallProperty.Value = value;
        }
    }
    
    public virtual Int32 RainfallMovementSteps {
        get {
            return RainfallMovementStepsProperty.Value;
        }
        set {
            RainfallMovementStepsProperty.Value = value;
        }
    }
    
    public virtual Int32 RainfallNeighbors {
        get {
            return RainfallNeighborsProperty.Value;
        }
        set {
            RainfallNeighborsProperty.Value = value;
        }
    }
    
    public virtual Single RiverMinHeight {
        get {
            return RiverMinHeightProperty.Value;
        }
        set {
            RiverMinHeightProperty.Value = value;
        }
    }
    
    public virtual Int32 RiverMinLength {
        get {
            return RiverMinLengthProperty.Value;
        }
        set {
            RiverMinLengthProperty.Value = value;
        }
    }
    
    public virtual Int32 RiverMaxLength {
        get {
            return RiverMaxLengthProperty.Value;
        }
        set {
            RiverMaxLengthProperty.Value = value;
        }
    }
    
    public virtual Int32 LakeMinSize {
        get {
            return LakeMinSizeProperty.Value;
        }
        set {
            LakeMinSizeProperty.Value = value;
        }
    }
    
    public virtual Int32 SeaMinSize {
        get {
            return SeaMinSizeProperty.Value;
        }
        set {
            SeaMinSizeProperty.Value = value;
        }
    }
    
    public virtual Int32 ChunkHexCountX {
        get {
            return ChunkHexCountXProperty.Value;
        }
        set {
            ChunkHexCountXProperty.Value = value;
        }
    }
    
    public virtual Int32 ChunkHexCountY {
        get {
            return ChunkHexCountYProperty.Value;
        }
        set {
            ChunkHexCountYProperty.Value = value;
        }
    }
    
    public virtual Vector3 CameraPos {
        get {
            return CameraPosProperty.Value;
        }
        set {
            CameraPosProperty.Value = value;
        }
    }
    
    public virtual AnimationCurve LatitudeTempCurve {
        get {
            return LatitudeTempCurveProperty.Value;
        }
        set {
            LatitudeTempCurveProperty.Value = value;
        }
    }
    
    public virtual TerrainTypesList TerrainTypesList {
        get {
            return TerrainTypesListProperty.Value;
        }
        set {
            TerrainTypesListProperty.Value = value;
        }
    }
    
    public virtual AnimationCurve AltitudeTempCurve {
        get {
            return AltitudeTempCurveProperty.Value;
        }
        set {
            AltitudeTempCurveProperty.Value = value;
        }
    }
    
    public virtual ModelCollection<Hex> WaterHexes {
        get {
            return _WaterHexes;
        }
        set {
            _WaterHexes = value;
        }
    }
    
    public virtual ModelCollection<Hex> RiverHexes {
        get {
            return _RiverHexes;
        }
        set {
            _RiverHexes = value;
        }
    }
    
    public virtual Signal<GenerateTerrainCommand> GenerateTerrain {
        get {
            return _GenerateTerrain;
        }
        set {
            _GenerateTerrain = value;
        }
    }
    
    public virtual Signal<GenerateChunksCommand> GenerateChunks {
        get {
            return _GenerateChunks;
        }
        set {
            _GenerateChunks = value;
        }
    }
    
    public virtual Signal<ErosionCommand> Erosion {
        get {
            return _Erosion;
        }
        set {
            _Erosion = value;
        }
    }
    
    public override void Bind() {
        base.Bind();
        this.GenerateTerrain = new Signal<GenerateTerrainCommand>(this, this.Aggregator);
        this.GenerateChunks = new Signal<GenerateChunksCommand>(this, this.Aggregator);
        this.Erosion = new Signal<ErosionCommand>(this, this.Aggregator);
        _WidthProperty = new P<Int32>(this, "Width");
        _HeightProperty = new P<Int32>(this, "Height");
        _ElevationsProperty = new P<Single>(this, "Elevations");
        _SeaLevelProperty = new P<Int32>(this, "SeaLevel");
        _SeedProperty = new P<Int32>(this, "Seed");
        _RandomizedSeedProperty = new P<Boolean>(this, "RandomizedSeed");
        _DiamonDetailProperty = new P<Single>(this, "DiamonDetail");
        _DiamondVariationProperty = new P<Single>(this, "DiamondVariation");
        _RiverFrequencyProperty = new P<Int32>(this, "RiverFrequency");
        _RiverLengthProperty = new P<Int32>(this, "RiverLength");
        _MountainRangeFrequencyProperty = new P<Int32>(this, "MountainRangeFrequency");
        _MountainRangeScaleProperty = new P<Int32>(this, "MountainRangeScale");
        _MountainSpacingProperty = new P<Int32>(this, "MountainSpacing");
        _ChunksProperty = new P<ChunkViewModel[,]>(this, "Chunks");
        _HexesProperty = new P<Hex[,]>(this, "Hexes");
        _ChunkSizeProperty = new P<Int32>(this, "ChunkSize");
        _HexSideLengthProperty = new P<Int32>(this, "HexSideLength");
        _PixelsPerUnitProperty = new P<Int32>(this, "PixelsPerUnit");
        _TerrainHeightsProperty = new P<Single[,]>(this, "TerrainHeights");
        _PixelsToHeightProperty = new P<Int32>(this, "PixelsToHeight");
        _ErrosionPassesProperty = new P<Int32>(this, "ErrosionPasses");
        _RainfallProperty = new P<Single[,]>(this, "Rainfall");
        _RainfallMovementStepsProperty = new P<Int32>(this, "RainfallMovementSteps");
        _RainfallNeighborsProperty = new P<Int32>(this, "RainfallNeighbors");
        _RiverMinHeightProperty = new P<Single>(this, "RiverMinHeight");
        _RiverMinLengthProperty = new P<Int32>(this, "RiverMinLength");
        _RiverMaxLengthProperty = new P<Int32>(this, "RiverMaxLength");
        _LakeMinSizeProperty = new P<Int32>(this, "LakeMinSize");
        _SeaMinSizeProperty = new P<Int32>(this, "SeaMinSize");
        _ChunkHexCountXProperty = new P<Int32>(this, "ChunkHexCountX");
        _ChunkHexCountYProperty = new P<Int32>(this, "ChunkHexCountY");
        _CameraPosProperty = new P<Vector3>(this, "CameraPos");
        _LatitudeTempCurveProperty = new P<AnimationCurve>(this, "LatitudeTempCurve");
        _TerrainTypesListProperty = new P<TerrainTypesList>(this, "TerrainTypesList");
        _AltitudeTempCurveProperty = new P<AnimationCurve>(this, "AltitudeTempCurve");
    }
    
    protected virtual void WaterHexesCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs args) {
    }
    
    protected virtual void RiverHexesCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs args) {
    }
    
    public override void Read(ISerializerStream stream) {
        base.Read(stream);
        this.Width = stream.DeserializeInt("Width");;
        this.Height = stream.DeserializeInt("Height");;
        this.Elevations = stream.DeserializeFloat("Elevations");;
        this.SeaLevel = stream.DeserializeInt("SeaLevel");;
        this.Seed = stream.DeserializeInt("Seed");;
        this.RandomizedSeed = stream.DeserializeBool("RandomizedSeed");;
        this.DiamonDetail = stream.DeserializeFloat("DiamonDetail");;
        this.DiamondVariation = stream.DeserializeFloat("DiamondVariation");;
        this.RiverFrequency = stream.DeserializeInt("RiverFrequency");;
        this.RiverLength = stream.DeserializeInt("RiverLength");;
        this.MountainRangeFrequency = stream.DeserializeInt("MountainRangeFrequency");;
        this.MountainRangeScale = stream.DeserializeInt("MountainRangeScale");;
        this.MountainSpacing = stream.DeserializeInt("MountainSpacing");;
        this.ChunkSize = stream.DeserializeInt("ChunkSize");;
        this.HexSideLength = stream.DeserializeInt("HexSideLength");;
        this.PixelsPerUnit = stream.DeserializeInt("PixelsPerUnit");;
        this.PixelsToHeight = stream.DeserializeInt("PixelsToHeight");;
        this.ErrosionPasses = stream.DeserializeInt("ErrosionPasses");;
        this.RainfallMovementSteps = stream.DeserializeInt("RainfallMovementSteps");;
        this.RainfallNeighbors = stream.DeserializeInt("RainfallNeighbors");;
        this.RiverMinHeight = stream.DeserializeFloat("RiverMinHeight");;
        this.RiverMinLength = stream.DeserializeInt("RiverMinLength");;
        this.RiverMaxLength = stream.DeserializeInt("RiverMaxLength");;
        this.LakeMinSize = stream.DeserializeInt("LakeMinSize");;
        this.SeaMinSize = stream.DeserializeInt("SeaMinSize");;
        this.ChunkHexCountX = stream.DeserializeInt("ChunkHexCountX");;
        this.ChunkHexCountY = stream.DeserializeInt("ChunkHexCountY");;
        this.CameraPos = stream.DeserializeVector3("CameraPos");;
    }
    
    public override void Write(ISerializerStream stream) {
        base.Write(stream);
        stream.SerializeInt("Width", this.Width);
        stream.SerializeInt("Height", this.Height);
        stream.SerializeFloat("Elevations", this.Elevations);
        stream.SerializeInt("SeaLevel", this.SeaLevel);
        stream.SerializeInt("Seed", this.Seed);
        stream.SerializeBool("RandomizedSeed", this.RandomizedSeed);
        stream.SerializeFloat("DiamonDetail", this.DiamonDetail);
        stream.SerializeFloat("DiamondVariation", this.DiamondVariation);
        stream.SerializeInt("RiverFrequency", this.RiverFrequency);
        stream.SerializeInt("RiverLength", this.RiverLength);
        stream.SerializeInt("MountainRangeFrequency", this.MountainRangeFrequency);
        stream.SerializeInt("MountainRangeScale", this.MountainRangeScale);
        stream.SerializeInt("MountainSpacing", this.MountainSpacing);
        stream.SerializeInt("ChunkSize", this.ChunkSize);
        stream.SerializeInt("HexSideLength", this.HexSideLength);
        stream.SerializeInt("PixelsPerUnit", this.PixelsPerUnit);
        stream.SerializeInt("PixelsToHeight", this.PixelsToHeight);
        stream.SerializeInt("ErrosionPasses", this.ErrosionPasses);
        stream.SerializeInt("RainfallMovementSteps", this.RainfallMovementSteps);
        stream.SerializeInt("RainfallNeighbors", this.RainfallNeighbors);
        stream.SerializeFloat("RiverMinHeight", this.RiverMinHeight);
        stream.SerializeInt("RiverMinLength", this.RiverMinLength);
        stream.SerializeInt("RiverMaxLength", this.RiverMaxLength);
        stream.SerializeInt("LakeMinSize", this.LakeMinSize);
        stream.SerializeInt("SeaMinSize", this.SeaMinSize);
        stream.SerializeInt("ChunkHexCountX", this.ChunkHexCountX);
        stream.SerializeInt("ChunkHexCountY", this.ChunkHexCountY);
        stream.SerializeVector3("CameraPos", this.CameraPos);
    }
    
    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list) {
        base.FillCommands(list);
        list.Add(new ViewModelCommandInfo("GenerateTerrain", GenerateTerrain) { ParameterType = typeof(void) });
        list.Add(new ViewModelCommandInfo("GenerateChunks", GenerateChunks) { ParameterType = typeof(void) });
        list.Add(new ViewModelCommandInfo("Erosion", Erosion) { ParameterType = typeof(void) });
    }
    
    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_WidthProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_HeightProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_ElevationsProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_SeaLevelProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_SeedProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_RandomizedSeedProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_DiamonDetailProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_DiamondVariationProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_RiverFrequencyProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_RiverLengthProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_MountainRangeFrequencyProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_MountainRangeScaleProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_MountainSpacingProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_ChunksProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_HexesProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_ChunkSizeProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_HexSideLengthProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_PixelsPerUnitProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_TerrainHeightsProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_PixelsToHeightProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_ErrosionPassesProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_RainfallProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_RainfallMovementStepsProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_RainfallNeighborsProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_RiverMinHeightProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_RiverMinLengthProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_RiverMaxLengthProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_LakeMinSizeProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_SeaMinSizeProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_ChunkHexCountXProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_ChunkHexCountYProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_CameraPosProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_LatitudeTempCurveProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_TerrainTypesListProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_AltitudeTempCurveProperty, false, false, false, false));
        list.Add(new ViewModelPropertyInfo(_WaterHexes, false, true, false, false));
        list.Add(new ViewModelPropertyInfo(_RiverHexes, false, true, false, false));
    }
}

public partial class TerrainViewModel {
    
    public TerrainViewModel(IEventAggregator aggregator) : 
            base(aggregator) {
    }
}

public partial class ResourceViewModelBase : ViewModel {
    
    private P<String> _NameProperty;
    
    private P<Int32> _AmountProperty;
    
    private P<Int32> _TotalAmountProperty;
    
    public ResourceViewModelBase(IEventAggregator aggregator) : 
            base(aggregator) {
    }
    
    public virtual P<String> NameProperty {
        get {
            return _NameProperty;
        }
        set {
            _NameProperty = value;
        }
    }
    
    public virtual P<Int32> AmountProperty {
        get {
            return _AmountProperty;
        }
        set {
            _AmountProperty = value;
        }
    }
    
    public virtual P<Int32> TotalAmountProperty {
        get {
            return _TotalAmountProperty;
        }
        set {
            _TotalAmountProperty = value;
        }
    }
    
    public virtual String Name {
        get {
            return NameProperty.Value;
        }
        set {
            NameProperty.Value = value;
        }
    }
    
    public virtual Int32 Amount {
        get {
            return AmountProperty.Value;
        }
        set {
            AmountProperty.Value = value;
        }
    }
    
    public virtual Int32 TotalAmount {
        get {
            return TotalAmountProperty.Value;
        }
        set {
            TotalAmountProperty.Value = value;
        }
    }
    
    public override void Bind() {
        base.Bind();
        _NameProperty = new P<String>(this, "Name");
        _AmountProperty = new P<Int32>(this, "Amount");
        _TotalAmountProperty = new P<Int32>(this, "TotalAmount");
    }
    
    public override void Read(ISerializerStream stream) {
        base.Read(stream);
        this.Amount = stream.DeserializeInt("Amount");;
        this.TotalAmount = stream.DeserializeInt("TotalAmount");;
    }
    
    public override void Write(ISerializerStream stream) {
        base.Write(stream);
        stream.SerializeInt("Amount", this.Amount);
        stream.SerializeInt("TotalAmount", this.TotalAmount);
    }
    
    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list) {
        base.FillCommands(list);
    }
    
    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_NameProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_AmountProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_TotalAmountProperty, false, false, false, false));
    }
}

public partial class ResourceViewModel {
    
    public ResourceViewModel(IEventAggregator aggregator) : 
            base(aggregator) {
    }
}

public partial class WeatherViewModelBase : ViewModel {
    
    private P<Int32> _BaseTemperatureProperty;
    
    private P<Int32> _BaseHumidityProperty;
    
    private P<AnimationCurve> _LatitudeTempCurveProperty;
    
    private P<AnimationCurve> _AltitudeTempCurveProperty;
    
    public WeatherViewModelBase(IEventAggregator aggregator) : 
            base(aggregator) {
    }
    
    public virtual P<Int32> BaseTemperatureProperty {
        get {
            return _BaseTemperatureProperty;
        }
        set {
            _BaseTemperatureProperty = value;
        }
    }
    
    public virtual P<Int32> BaseHumidityProperty {
        get {
            return _BaseHumidityProperty;
        }
        set {
            _BaseHumidityProperty = value;
        }
    }
    
    public virtual P<AnimationCurve> LatitudeTempCurveProperty {
        get {
            return _LatitudeTempCurveProperty;
        }
        set {
            _LatitudeTempCurveProperty = value;
        }
    }
    
    public virtual P<AnimationCurve> AltitudeTempCurveProperty {
        get {
            return _AltitudeTempCurveProperty;
        }
        set {
            _AltitudeTempCurveProperty = value;
        }
    }
    
    public virtual Int32 BaseTemperature {
        get {
            return BaseTemperatureProperty.Value;
        }
        set {
            BaseTemperatureProperty.Value = value;
        }
    }
    
    public virtual Int32 BaseHumidity {
        get {
            return BaseHumidityProperty.Value;
        }
        set {
            BaseHumidityProperty.Value = value;
        }
    }
    
    public virtual AnimationCurve LatitudeTempCurve {
        get {
            return LatitudeTempCurveProperty.Value;
        }
        set {
            LatitudeTempCurveProperty.Value = value;
        }
    }
    
    public virtual AnimationCurve AltitudeTempCurve {
        get {
            return AltitudeTempCurveProperty.Value;
        }
        set {
            AltitudeTempCurveProperty.Value = value;
        }
    }
    
    public override void Bind() {
        base.Bind();
        _BaseTemperatureProperty = new P<Int32>(this, "BaseTemperature");
        _BaseHumidityProperty = new P<Int32>(this, "BaseHumidity");
        _LatitudeTempCurveProperty = new P<AnimationCurve>(this, "LatitudeTempCurve");
        _AltitudeTempCurveProperty = new P<AnimationCurve>(this, "AltitudeTempCurve");
    }
    
    public override void Read(ISerializerStream stream) {
        base.Read(stream);
        this.BaseTemperature = stream.DeserializeInt("BaseTemperature");;
        this.BaseHumidity = stream.DeserializeInt("BaseHumidity");;
    }
    
    public override void Write(ISerializerStream stream) {
        base.Write(stream);
        stream.SerializeInt("BaseTemperature", this.BaseTemperature);
        stream.SerializeInt("BaseHumidity", this.BaseHumidity);
    }
    
    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list) {
        base.FillCommands(list);
    }
    
    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_BaseTemperatureProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_BaseHumidityProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_LatitudeTempCurveProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_AltitudeTempCurveProperty, false, false, false, false));
    }
}

public partial class WeatherViewModel {
    
    public WeatherViewModel(IEventAggregator aggregator) : 
            base(aggregator) {
    }
}

public partial class ChunkViewModelBase : ViewModel {
    
    private P<Int32> _XIndexProperty;
    
    private P<Int32> _YIndexProperty;
    
    private Signal<GenerateChunkCommand> _GenerateChunk;
    
    public ChunkViewModelBase(IEventAggregator aggregator) : 
            base(aggregator) {
    }
    
    public virtual P<Int32> XIndexProperty {
        get {
            return _XIndexProperty;
        }
        set {
            _XIndexProperty = value;
        }
    }
    
    public virtual P<Int32> YIndexProperty {
        get {
            return _YIndexProperty;
        }
        set {
            _YIndexProperty = value;
        }
    }
    
    public virtual Int32 XIndex {
        get {
            return XIndexProperty.Value;
        }
        set {
            XIndexProperty.Value = value;
        }
    }
    
    public virtual Int32 YIndex {
        get {
            return YIndexProperty.Value;
        }
        set {
            YIndexProperty.Value = value;
        }
    }
    
    public virtual Signal<GenerateChunkCommand> GenerateChunk {
        get {
            return _GenerateChunk;
        }
        set {
            _GenerateChunk = value;
        }
    }
    
    public override void Bind() {
        base.Bind();
        this.GenerateChunk = new Signal<GenerateChunkCommand>(this, this.Aggregator);
        _XIndexProperty = new P<Int32>(this, "XIndex");
        _YIndexProperty = new P<Int32>(this, "YIndex");
    }
    
    public override void Read(ISerializerStream stream) {
        base.Read(stream);
        this.XIndex = stream.DeserializeInt("XIndex");;
        this.YIndex = stream.DeserializeInt("YIndex");;
    }
    
    public override void Write(ISerializerStream stream) {
        base.Write(stream);
        stream.SerializeInt("XIndex", this.XIndex);
        stream.SerializeInt("YIndex", this.YIndex);
    }
    
    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list) {
        base.FillCommands(list);
        list.Add(new ViewModelCommandInfo("GenerateChunk", GenerateChunk) { ParameterType = typeof(void) });
    }
    
    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_XIndexProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_YIndexProperty, false, false, false, false));
    }
}

public partial class ChunkViewModel {
    
    public ChunkViewModel(IEventAggregator aggregator) : 
            base(aggregator) {
    }
}

public partial class WorldViewModelBase : ViewModel {
    
    private P<Int32> _AgeProperty;
    
    private Signal<GenerateWorldCommand> _GenerateWorld;
    
    public WorldViewModelBase(IEventAggregator aggregator) : 
            base(aggregator) {
    }
    
    public virtual P<Int32> AgeProperty {
        get {
            return _AgeProperty;
        }
        set {
            _AgeProperty = value;
        }
    }
    
    public virtual Int32 Age {
        get {
            return AgeProperty.Value;
        }
        set {
            AgeProperty.Value = value;
        }
    }
    
    public virtual Signal<GenerateWorldCommand> GenerateWorld {
        get {
            return _GenerateWorld;
        }
        set {
            _GenerateWorld = value;
        }
    }
    
    public override void Bind() {
        base.Bind();
        this.GenerateWorld = new Signal<GenerateWorldCommand>(this, this.Aggregator);
        _AgeProperty = new P<Int32>(this, "Age");
    }
    
    public override void Read(ISerializerStream stream) {
        base.Read(stream);
        this.Age = stream.DeserializeInt("Age");;
    }
    
    public override void Write(ISerializerStream stream) {
        base.Write(stream);
        stream.SerializeInt("Age", this.Age);
    }
    
    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list) {
        base.FillCommands(list);
        list.Add(new ViewModelCommandInfo("GenerateWorld", GenerateWorld) { ParameterType = typeof(void) });
    }
    
    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_AgeProperty, false, false, false, false));
    }
}

public partial class WorldViewModel {
    
    public WorldViewModel(IEventAggregator aggregator) : 
            base(aggregator) {
    }
}

public partial class PlayerViewModelBase : ViewModel {
    
    private P<Hex> _SelectedHexProperty;
    
    private P<TerrainViewModel> _TerrainProperty;
    
    public PlayerViewModelBase(IEventAggregator aggregator) : 
            base(aggregator) {
    }
    
    public virtual P<Hex> SelectedHexProperty {
        get {
            return _SelectedHexProperty;
        }
        set {
            _SelectedHexProperty = value;
        }
    }
    
    public virtual P<TerrainViewModel> TerrainProperty {
        get {
            return _TerrainProperty;
        }
        set {
            _TerrainProperty = value;
        }
    }
    
    public virtual Hex SelectedHex {
        get {
            return SelectedHexProperty.Value;
        }
        set {
            SelectedHexProperty.Value = value;
        }
    }
    
    public virtual TerrainViewModel Terrain {
        get {
            return TerrainProperty.Value;
        }
        set {
            TerrainProperty.Value = value;
        }
    }
    
    public override void Bind() {
        base.Bind();
        _SelectedHexProperty = new P<Hex>(this, "SelectedHex");
        _TerrainProperty = new P<TerrainViewModel>(this, "Terrain");
    }
    
    public override void Read(ISerializerStream stream) {
        base.Read(stream);
        		if (stream.DeepSerialize) this.Terrain = stream.DeserializeObject<TerrainViewModel>("Terrain");;
    }
    
    public override void Write(ISerializerStream stream) {
        base.Write(stream);
        if (stream.DeepSerialize) stream.SerializeObject("Terrain", this.Terrain);;
    }
    
    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list) {
        base.FillCommands(list);
    }
    
    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_SelectedHexProperty, false, false, false, false));
        // PropertiesChildItem
        list.Add(new ViewModelPropertyInfo(_TerrainProperty, true, false, false, false));
    }
}

public partial class PlayerViewModel {
    
    public PlayerViewModel(IEventAggregator aggregator) : 
            base(aggregator) {
    }
}
