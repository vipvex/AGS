// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using uFrame.Kernel;
using uFrame.MVVM;
using uFrame.MVVM.Services;
using uFrame.MVVM.Bindings;
using uFrame.Serialization;
using UniRx;
using UnityEngine;


public class TerrainPreviewViewBase : uFrame.MVVM.ViewBase {
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Width;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Height;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _Elevations;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _SeaLevel;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Seed;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _RandomizedSeed;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _DiamonDetail;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _DiamondVariation;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _RiverFrequency;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _RiverLength;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _MountainRangeFrequency;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _MountainRangeScale;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _MountainSpacing;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ChunkViewModel[,] _Chunks;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Hex[,] _Hexes;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _ChunkSize;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _HexSideLength;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _PixelsPerUnit;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single[,] _TerrainHeights;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _PixelsToHeight;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _ErrosionPasses;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single[,] _Rainfall;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _RainfallMovementSteps;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _RainfallNeighbors;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _RiverMinHeight;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _RiverMinLength;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _RiverMaxLength;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _LakeMinSize;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _SeaMinSize;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _ChunkHexCountX;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _ChunkHexCountY;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Vector3 _CameraPos;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public AnimationCurve _LatitudeTempCurve;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public TerrainTypesList _TerrainTypesList;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public AnimationCurve _AltitudeTempCurve;
    
    [UFToggleGroup("GenerateChunks")]
    [UnityEngine.HideInInspector()]
    public bool _BindGenerateChunks = true;
    
    public override string DefaultIdentifier {
        get {
            return "Terrain";
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(TerrainViewModel);
        }
    }
    
    public TerrainViewModel Terrain {
        get {
            return (TerrainViewModel)ViewModelObject;
        }
    }
    
    protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
        base.InitializeViewModel(model);
        // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
        // var vm = model as TerrainViewModel;
        // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
        var terrainpreviewview = ((TerrainViewModel)model);
        terrainpreviewview.Width = this._Width;
        terrainpreviewview.Height = this._Height;
        terrainpreviewview.Elevations = this._Elevations;
        terrainpreviewview.SeaLevel = this._SeaLevel;
        terrainpreviewview.Seed = this._Seed;
        terrainpreviewview.RandomizedSeed = this._RandomizedSeed;
        terrainpreviewview.DiamonDetail = this._DiamonDetail;
        terrainpreviewview.DiamondVariation = this._DiamondVariation;
        terrainpreviewview.RiverFrequency = this._RiverFrequency;
        terrainpreviewview.RiverLength = this._RiverLength;
        terrainpreviewview.MountainRangeFrequency = this._MountainRangeFrequency;
        terrainpreviewview.MountainRangeScale = this._MountainRangeScale;
        terrainpreviewview.MountainSpacing = this._MountainSpacing;
        terrainpreviewview.Chunks = this._Chunks;
        terrainpreviewview.Hexes = this._Hexes;
        terrainpreviewview.ChunkSize = this._ChunkSize;
        terrainpreviewview.HexSideLength = this._HexSideLength;
        terrainpreviewview.PixelsPerUnit = this._PixelsPerUnit;
        terrainpreviewview.TerrainHeights = this._TerrainHeights;
        terrainpreviewview.PixelsToHeight = this._PixelsToHeight;
        terrainpreviewview.ErrosionPasses = this._ErrosionPasses;
        terrainpreviewview.Rainfall = this._Rainfall;
        terrainpreviewview.RainfallMovementSteps = this._RainfallMovementSteps;
        terrainpreviewview.RainfallNeighbors = this._RainfallNeighbors;
        terrainpreviewview.RiverMinHeight = this._RiverMinHeight;
        terrainpreviewview.RiverMinLength = this._RiverMinLength;
        terrainpreviewview.RiverMaxLength = this._RiverMaxLength;
        terrainpreviewview.LakeMinSize = this._LakeMinSize;
        terrainpreviewview.SeaMinSize = this._SeaMinSize;
        terrainpreviewview.ChunkHexCountX = this._ChunkHexCountX;
        terrainpreviewview.ChunkHexCountY = this._ChunkHexCountY;
        terrainpreviewview.CameraPos = this._CameraPos;
        terrainpreviewview.LatitudeTempCurve = this._LatitudeTempCurve;
        terrainpreviewview.TerrainTypesList = this._TerrainTypesList;
        terrainpreviewview.AltitudeTempCurve = this._AltitudeTempCurve;
    }
    
    public override void Bind() {
        base.Bind();
        // Use this.Terrain to access the viewmodel.
        // Use this method to subscribe to the view-model.
        // Any designer bindings are created in the base implementation.
        if (_BindGenerateChunks) {
            this.BindCommandExecuted(this.Terrain.GenerateChunks, this.GenerateChunksExecuted);
        }
    }
    
    public virtual void GenerateChunksExecuted(GenerateChunksCommand command) {
    }
    
    public virtual void ExecuteGenerateTerrain() {
        Terrain.GenerateTerrain.OnNext(new GenerateTerrainCommand() { Sender = Terrain });
    }
    
    public virtual void ExecuteErosion() {
        Terrain.Erosion.OnNext(new ErosionCommand() { Sender = Terrain });
    }
    
    public virtual void ExecuteGenerateTerrain(GenerateTerrainCommand command) {
        command.Sender = Terrain;
        Terrain.GenerateTerrain.OnNext(command);
    }
    
    public virtual void ExecuteGenerateChunks(GenerateChunksCommand command) {
        command.Sender = Terrain;
        Terrain.GenerateChunks.OnNext(command);
    }
    
    public virtual void ExecuteErosion(ErosionCommand command) {
        command.Sender = Terrain;
        Terrain.Erosion.OnNext(command);
    }
}

public class ChunkViewBase : uFrame.MVVM.ViewBase {
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _XIndex;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _YIndex;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Vector3 _Pos;
    
    public override string DefaultIdentifier {
        get {
            return base.DefaultIdentifier;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(ChunkViewModel);
        }
    }
    
    public ChunkViewModel Chunk {
        get {
            return (ChunkViewModel)ViewModelObject;
        }
    }
    
    protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
        base.InitializeViewModel(model);
        // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
        // var vm = model as ChunkViewModel;
        // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
        var chunkview = ((ChunkViewModel)model);
        chunkview.XIndex = this._XIndex;
        chunkview.YIndex = this._YIndex;
        chunkview.Pos = this._Pos;
    }
    
    public override void Bind() {
        base.Bind();
        // Use this.Chunk to access the viewmodel.
        // Use this method to subscribe to the view-model.
        // Any designer bindings are created in the base implementation.
    }
    
    public virtual void ExecuteGenerateChunk() {
        Chunk.GenerateChunk.OnNext(new GenerateChunkCommand() { Sender = Chunk });
    }
    
    public virtual void ExecuteGenerateChunk(GenerateChunkCommand command) {
        command.Sender = Chunk;
        Chunk.GenerateChunk.OnNext(command);
    }
}

public class TerrainViewBase : uFrame.MVVM.ViewBase {
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Width;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Height;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _Elevations;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _SeaLevel;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Seed;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _RandomizedSeed;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _DiamonDetail;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _DiamondVariation;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _RiverFrequency;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _RiverLength;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _MountainRangeFrequency;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _MountainRangeScale;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _MountainSpacing;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ChunkViewModel[,] _Chunks;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Hex[,] _Hexes;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _ChunkSize;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _HexSideLength;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _PixelsPerUnit;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single[,] _TerrainHeights;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _PixelsToHeight;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _ErrosionPasses;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single[,] _Rainfall;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _RainfallMovementSteps;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _RainfallNeighbors;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _RiverMinHeight;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _RiverMinLength;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _RiverMaxLength;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _LakeMinSize;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _SeaMinSize;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _ChunkHexCountX;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _ChunkHexCountY;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Vector3 _CameraPos;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public AnimationCurve _LatitudeTempCurve;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public TerrainTypesList _TerrainTypesList;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public AnimationCurve _AltitudeTempCurve;
    
    public override string DefaultIdentifier {
        get {
            return "Terrain";
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(TerrainViewModel);
        }
    }
    
    public TerrainViewModel Terrain {
        get {
            return (TerrainViewModel)ViewModelObject;
        }
    }
    
    protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
        base.InitializeViewModel(model);
        // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
        // var vm = model as TerrainViewModel;
        // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
        var terrainview = ((TerrainViewModel)model);
        terrainview.Width = this._Width;
        terrainview.Height = this._Height;
        terrainview.Elevations = this._Elevations;
        terrainview.SeaLevel = this._SeaLevel;
        terrainview.Seed = this._Seed;
        terrainview.RandomizedSeed = this._RandomizedSeed;
        terrainview.DiamonDetail = this._DiamonDetail;
        terrainview.DiamondVariation = this._DiamondVariation;
        terrainview.RiverFrequency = this._RiverFrequency;
        terrainview.RiverLength = this._RiverLength;
        terrainview.MountainRangeFrequency = this._MountainRangeFrequency;
        terrainview.MountainRangeScale = this._MountainRangeScale;
        terrainview.MountainSpacing = this._MountainSpacing;
        terrainview.Chunks = this._Chunks;
        terrainview.Hexes = this._Hexes;
        terrainview.ChunkSize = this._ChunkSize;
        terrainview.HexSideLength = this._HexSideLength;
        terrainview.PixelsPerUnit = this._PixelsPerUnit;
        terrainview.TerrainHeights = this._TerrainHeights;
        terrainview.PixelsToHeight = this._PixelsToHeight;
        terrainview.ErrosionPasses = this._ErrosionPasses;
        terrainview.Rainfall = this._Rainfall;
        terrainview.RainfallMovementSteps = this._RainfallMovementSteps;
        terrainview.RainfallNeighbors = this._RainfallNeighbors;
        terrainview.RiverMinHeight = this._RiverMinHeight;
        terrainview.RiverMinLength = this._RiverMinLength;
        terrainview.RiverMaxLength = this._RiverMaxLength;
        terrainview.LakeMinSize = this._LakeMinSize;
        terrainview.SeaMinSize = this._SeaMinSize;
        terrainview.ChunkHexCountX = this._ChunkHexCountX;
        terrainview.ChunkHexCountY = this._ChunkHexCountY;
        terrainview.CameraPos = this._CameraPos;
        terrainview.LatitudeTempCurve = this._LatitudeTempCurve;
        terrainview.TerrainTypesList = this._TerrainTypesList;
        terrainview.AltitudeTempCurve = this._AltitudeTempCurve;
    }
    
    public override void Bind() {
        base.Bind();
        // Use this.Terrain to access the viewmodel.
        // Use this method to subscribe to the view-model.
        // Any designer bindings are created in the base implementation.
    }
    
    public virtual void ExecuteGenerateTerrain() {
        Terrain.GenerateTerrain.OnNext(new GenerateTerrainCommand() { Sender = Terrain });
    }
    
    public virtual void ExecuteErosion() {
        Terrain.Erosion.OnNext(new ErosionCommand() { Sender = Terrain });
    }
    
    public virtual void ExecuteGenerateTerrain(GenerateTerrainCommand command) {
        command.Sender = Terrain;
        Terrain.GenerateTerrain.OnNext(command);
    }
    
    public virtual void ExecuteGenerateChunks(GenerateChunksCommand command) {
        command.Sender = Terrain;
        Terrain.GenerateChunks.OnNext(command);
    }
    
    public virtual void ExecuteErosion(ErosionCommand command) {
        command.Sender = Terrain;
        Terrain.Erosion.OnNext(command);
    }
}

public class ChunkManagerViewBase : uFrame.MVVM.ViewBase {
    
    private System.IDisposable _CameraPosDisposable;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Width;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Height;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _Elevations;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _SeaLevel;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Seed;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _RandomizedSeed;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _DiamonDetail;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _DiamondVariation;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _RiverFrequency;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _RiverLength;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _MountainRangeFrequency;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _MountainRangeScale;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _MountainSpacing;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ChunkViewModel[,] _Chunks;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Hex[,] _Hexes;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _ChunkSize;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _HexSideLength;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _PixelsPerUnit;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single[,] _TerrainHeights;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _PixelsToHeight;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _ErrosionPasses;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single[,] _Rainfall;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _RainfallMovementSteps;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _RainfallNeighbors;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _RiverMinHeight;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _RiverMinLength;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _RiverMaxLength;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _LakeMinSize;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _SeaMinSize;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _ChunkHexCountX;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _ChunkHexCountY;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Vector3 _CameraPos;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public AnimationCurve _LatitudeTempCurve;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public TerrainTypesList _TerrainTypesList;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public AnimationCurve _AltitudeTempCurve;
    
    [UFToggleGroup("GenerateChunks")]
    [UnityEngine.HideInInspector()]
    public bool _BindGenerateChunks = true;
    
    public override string DefaultIdentifier {
        get {
            return "Terrain";
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(TerrainViewModel);
        }
    }
    
    public TerrainViewModel Terrain {
        get {
            return (TerrainViewModel)ViewModelObject;
        }
    }
    
    public virtual void ResetCameraPos() {
        if (_CameraPosDisposable != null) {
            _CameraPosDisposable.Dispose();
        }
        _CameraPosDisposable = GetCameraPosObservable().Subscribe(Terrain.CameraPosProperty).DisposeWith(this);
    }
    
    protected virtual Vector3 CalculateCameraPos() {
        return default(Vector3);
    }
    
    protected virtual UniRx.IObservable<Vector3> GetCameraPosObservable() {
        return this.UpdateAsObservable().Select(p=>CalculateCameraPos());
    }
    
    protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
        base.InitializeViewModel(model);
        // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
        // var vm = model as TerrainViewModel;
        // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
        var chunkmanagerview = ((TerrainViewModel)model);
        chunkmanagerview.Width = this._Width;
        chunkmanagerview.Height = this._Height;
        chunkmanagerview.Elevations = this._Elevations;
        chunkmanagerview.SeaLevel = this._SeaLevel;
        chunkmanagerview.Seed = this._Seed;
        chunkmanagerview.RandomizedSeed = this._RandomizedSeed;
        chunkmanagerview.DiamonDetail = this._DiamonDetail;
        chunkmanagerview.DiamondVariation = this._DiamondVariation;
        chunkmanagerview.RiverFrequency = this._RiverFrequency;
        chunkmanagerview.RiverLength = this._RiverLength;
        chunkmanagerview.MountainRangeFrequency = this._MountainRangeFrequency;
        chunkmanagerview.MountainRangeScale = this._MountainRangeScale;
        chunkmanagerview.MountainSpacing = this._MountainSpacing;
        chunkmanagerview.Chunks = this._Chunks;
        chunkmanagerview.Hexes = this._Hexes;
        chunkmanagerview.ChunkSize = this._ChunkSize;
        chunkmanagerview.HexSideLength = this._HexSideLength;
        chunkmanagerview.PixelsPerUnit = this._PixelsPerUnit;
        chunkmanagerview.TerrainHeights = this._TerrainHeights;
        chunkmanagerview.PixelsToHeight = this._PixelsToHeight;
        chunkmanagerview.ErrosionPasses = this._ErrosionPasses;
        chunkmanagerview.Rainfall = this._Rainfall;
        chunkmanagerview.RainfallMovementSteps = this._RainfallMovementSteps;
        chunkmanagerview.RainfallNeighbors = this._RainfallNeighbors;
        chunkmanagerview.RiverMinHeight = this._RiverMinHeight;
        chunkmanagerview.RiverMinLength = this._RiverMinLength;
        chunkmanagerview.RiverMaxLength = this._RiverMaxLength;
        chunkmanagerview.LakeMinSize = this._LakeMinSize;
        chunkmanagerview.SeaMinSize = this._SeaMinSize;
        chunkmanagerview.ChunkHexCountX = this._ChunkHexCountX;
        chunkmanagerview.ChunkHexCountY = this._ChunkHexCountY;
        chunkmanagerview.CameraPos = this._CameraPos;
        chunkmanagerview.LatitudeTempCurve = this._LatitudeTempCurve;
        chunkmanagerview.TerrainTypesList = this._TerrainTypesList;
        chunkmanagerview.AltitudeTempCurve = this._AltitudeTempCurve;
    }
    
    public override void Bind() {
        base.Bind();
        // Use this.Terrain to access the viewmodel.
        // Use this method to subscribe to the view-model.
        // Any designer bindings are created in the base implementation.
        if (_BindGenerateChunks) {
            this.BindCommandExecuted(this.Terrain.GenerateChunks, this.GenerateChunksExecuted);
        }
        ResetCameraPos();
    }
    
    public virtual void GenerateChunksExecuted(GenerateChunksCommand command) {
    }
    
    public virtual void ExecuteGenerateTerrain() {
        Terrain.GenerateTerrain.OnNext(new GenerateTerrainCommand() { Sender = Terrain });
    }
    
    public virtual void ExecuteErosion() {
        Terrain.Erosion.OnNext(new ErosionCommand() { Sender = Terrain });
    }
    
    public virtual void ExecuteGenerateTerrain(GenerateTerrainCommand command) {
        command.Sender = Terrain;
        Terrain.GenerateTerrain.OnNext(command);
    }
    
    public virtual void ExecuteGenerateChunks(GenerateChunksCommand command) {
        command.Sender = Terrain;
        Terrain.GenerateChunks.OnNext(command);
    }
    
    public virtual void ExecuteErosion(ErosionCommand command) {
        command.Sender = Terrain;
        Terrain.Erosion.OnNext(command);
    }
}

public class PlayerUIBase : uFrame.MVVM.ViewBase {
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Hex _SelectedHex;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public uFrame.MVVM.ViewBase _Terrain;
    
    [UFToggleGroup("SelectedHex")]
    [UnityEngine.HideInInspector()]
    public bool _BindSelectedHex = true;
    
    [UFGroup("SelectedHex")]
    [UnityEngine.SerializeField()]
    [UnityEngine.HideInInspector()]
    [UnityEngine.Serialization.FormerlySerializedAsAttribute("_SelectedHexonlyWhenChanged")]
    protected bool _SelectedHexOnlyWhenChanged;
    
    public override string DefaultIdentifier {
        get {
            return base.DefaultIdentifier;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(PlayerViewModel);
        }
    }
    
    public PlayerViewModel Player {
        get {
            return (PlayerViewModel)ViewModelObject;
        }
    }
    
    protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
        base.InitializeViewModel(model);
        // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
        // var vm = model as PlayerViewModel;
        // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
        var playerui = ((PlayerViewModel)model);
        playerui.SelectedHex = this._SelectedHex;
        playerui.Terrain = this._Terrain == null ? null :  ViewService.FetchViewModel(this._Terrain) as TerrainViewModel;
    }
    
    public override void Bind() {
        base.Bind();
        // Use this.Player to access the viewmodel.
        // Use this method to subscribe to the view-model.
        // Any designer bindings are created in the base implementation.
        if (_BindSelectedHex) {
            this.BindProperty(this.Player.SelectedHexProperty, this.SelectedHexChanged, _SelectedHexOnlyWhenChanged);
        }
    }
    
    public virtual void SelectedHexChanged(Hex arg1) {
    }
}

public class PlayerViewBase : uFrame.MVVM.ViewBase {
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Hex _SelectedHex;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public uFrame.MVVM.ViewBase _Terrain;
    
    public override string DefaultIdentifier {
        get {
            return base.DefaultIdentifier;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(PlayerViewModel);
        }
    }
    
    public PlayerViewModel Player {
        get {
            return (PlayerViewModel)ViewModelObject;
        }
    }
    
    protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
        base.InitializeViewModel(model);
        // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
        // var vm = model as PlayerViewModel;
        // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
        var playerview = ((PlayerViewModel)model);
        playerview.SelectedHex = this._SelectedHex;
        playerview.Terrain = this._Terrain == null ? null :  ViewService.FetchViewModel(this._Terrain) as TerrainViewModel;
    }
    
    public override void Bind() {
        base.Bind();
        // Use this.Player to access the viewmodel.
        // Use this method to subscribe to the view-model.
        // Any designer bindings are created in the base implementation.
    }
}

public class GameTimeUIBase : uFrame.MVVM.ViewBase {
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Year;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Month;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Day;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Seasons _Season;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _GameSpeed;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _Paused;
    
    [UFToggleGroup("Day")]
    [UnityEngine.HideInInspector()]
    public bool _BindDay = true;
    
    [UFGroup("Day")]
    [UnityEngine.SerializeField()]
    [UnityEngine.HideInInspector()]
    [UnityEngine.Serialization.FormerlySerializedAsAttribute("_DayonlyWhenChanged")]
    protected bool _DayOnlyWhenChanged;
    
    [UFToggleGroup("Month")]
    [UnityEngine.HideInInspector()]
    public bool _BindMonth = true;
    
    [UFGroup("Month")]
    [UnityEngine.SerializeField()]
    [UnityEngine.HideInInspector()]
    [UnityEngine.Serialization.FormerlySerializedAsAttribute("_MonthonlyWhenChanged")]
    protected bool _MonthOnlyWhenChanged;
    
    [UFToggleGroup("Season")]
    [UnityEngine.HideInInspector()]
    public bool _BindSeason = true;
    
    [UFGroup("Season")]
    [UnityEngine.SerializeField()]
    [UnityEngine.HideInInspector()]
    [UnityEngine.Serialization.FormerlySerializedAsAttribute("_SeasononlyWhenChanged")]
    protected bool _SeasonOnlyWhenChanged;
    
    [UFToggleGroup("Year")]
    [UnityEngine.HideInInspector()]
    public bool _BindYear = true;
    
    [UFGroup("Year")]
    [UnityEngine.SerializeField()]
    [UnityEngine.HideInInspector()]
    [UnityEngine.Serialization.FormerlySerializedAsAttribute("_YearonlyWhenChanged")]
    protected bool _YearOnlyWhenChanged;
    
    [UFToggleGroup("DecreaseGameSpeed")]
    [UnityEngine.HideInInspector()]
    public bool _BindDecreaseGameSpeed = true;
    
    [UFGroup("DecreaseGameSpeed")]
    [UnityEngine.SerializeField()]
    [UnityEngine.HideInInspector()]
    [UnityEngine.Serialization.FormerlySerializedAsAttribute("_DecreaseGameSpeedbutton")]
    protected UnityEngine.UI.Button _DecreaseGameSpeedButton;
    
    [UFToggleGroup("IncreaseGameSpeed")]
    [UnityEngine.HideInInspector()]
    public bool _BindIncreaseGameSpeed = true;
    
    [UFGroup("IncreaseGameSpeed")]
    [UnityEngine.SerializeField()]
    [UnityEngine.HideInInspector()]
    [UnityEngine.Serialization.FormerlySerializedAsAttribute("_IncreaseGameSpeedbutton")]
    protected UnityEngine.UI.Button _IncreaseGameSpeedButton;
    
    [UFToggleGroup("TogglePause")]
    [UnityEngine.HideInInspector()]
    public bool _BindTogglePause = true;
    
    [UFGroup("TogglePause")]
    [UnityEngine.SerializeField()]
    [UnityEngine.HideInInspector()]
    [UnityEngine.Serialization.FormerlySerializedAsAttribute("_TogglePausebutton")]
    protected UnityEngine.UI.Button _TogglePauseButton;
    
    [UFToggleGroup("Paused")]
    [UnityEngine.HideInInspector()]
    public bool _BindPaused = true;
    
    [UFGroup("Paused")]
    [UnityEngine.SerializeField()]
    [UnityEngine.HideInInspector()]
    [UnityEngine.Serialization.FormerlySerializedAsAttribute("_PausedonlyWhenChanged")]
    protected bool _PausedOnlyWhenChanged;
    
    [UFToggleGroup("GameSpeed")]
    [UnityEngine.HideInInspector()]
    public bool _BindGameSpeed = true;
    
    [UFGroup("GameSpeed")]
    [UnityEngine.SerializeField()]
    [UnityEngine.HideInInspector()]
    [UnityEngine.Serialization.FormerlySerializedAsAttribute("_GameSpeedonlyWhenChanged")]
    protected bool _GameSpeedOnlyWhenChanged;
    
    public override string DefaultIdentifier {
        get {
            return base.DefaultIdentifier;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(GameTimeViewModel);
        }
    }
    
    public GameTimeViewModel GameTime {
        get {
            return (GameTimeViewModel)ViewModelObject;
        }
    }
    
    protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
        base.InitializeViewModel(model);
        // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
        // var vm = model as GameTimeViewModel;
        // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
        var gametimeui = ((GameTimeViewModel)model);
        gametimeui.Year = this._Year;
        gametimeui.Month = this._Month;
        gametimeui.Day = this._Day;
        gametimeui.Season = this._Season;
        gametimeui.GameSpeed = this._GameSpeed;
        gametimeui.Paused = this._Paused;
    }
    
    public override void Bind() {
        base.Bind();
        // Use this.GameTime to access the viewmodel.
        // Use this method to subscribe to the view-model.
        // Any designer bindings are created in the base implementation.
        if (_BindDay) {
            this.BindProperty(this.GameTime.DayProperty, this.DayChanged, _DayOnlyWhenChanged);
        }
        if (_BindMonth) {
            this.BindProperty(this.GameTime.MonthProperty, this.MonthChanged, _MonthOnlyWhenChanged);
        }
        if (_BindSeason) {
            this.BindProperty(this.GameTime.SeasonProperty, this.SeasonChanged, _SeasonOnlyWhenChanged);
        }
        if (_BindYear) {
            this.BindProperty(this.GameTime.YearProperty, this.YearChanged, _YearOnlyWhenChanged);
        }
        if (_BindDecreaseGameSpeed) {
            this.BindButtonToCommand(_DecreaseGameSpeedButton, this.GameTime.DecreaseGameSpeed);
        }
        if (_BindIncreaseGameSpeed) {
            this.BindButtonToCommand(_IncreaseGameSpeedButton, this.GameTime.IncreaseGameSpeed);
        }
        if (_BindTogglePause) {
            this.BindButtonToCommand(_TogglePauseButton, this.GameTime.TogglePause);
        }
        if (_BindPaused) {
            this.BindProperty(this.GameTime.PausedProperty, this.PausedChanged, _PausedOnlyWhenChanged);
        }
        if (_BindGameSpeed) {
            this.BindProperty(this.GameTime.GameSpeedProperty, this.GameSpeedChanged, _GameSpeedOnlyWhenChanged);
        }
    }
    
    public virtual void DayChanged(Int32 arg1) {
    }
    
    public virtual void MonthChanged(Int32 arg1) {
    }
    
    public virtual void SeasonChanged(Seasons arg1) {
    }
    
    public virtual void YearChanged(Int32 arg1) {
    }
    
    public virtual void PausedChanged(Boolean arg1) {
    }
    
    public virtual void GameSpeedChanged(Int32 arg1) {
    }
    
    public virtual void ExecuteIncreaseGameSpeed() {
        GameTime.IncreaseGameSpeed.OnNext(new IncreaseGameSpeedCommand() { Sender = GameTime });
    }
    
    public virtual void ExecuteDecreaseGameSpeed() {
        GameTime.DecreaseGameSpeed.OnNext(new DecreaseGameSpeedCommand() { Sender = GameTime });
    }
    
    public virtual void ExecuteTogglePause() {
        GameTime.TogglePause.OnNext(new TogglePauseCommand() { Sender = GameTime });
    }
    
    public virtual void ExecuteIncreaseGameSpeed(IncreaseGameSpeedCommand command) {
        command.Sender = GameTime;
        GameTime.IncreaseGameSpeed.OnNext(command);
    }
    
    public virtual void ExecuteDecreaseGameSpeed(DecreaseGameSpeedCommand command) {
        command.Sender = GameTime;
        GameTime.DecreaseGameSpeed.OnNext(command);
    }
    
    public virtual void ExecuteTogglePause(TogglePauseCommand command) {
        command.Sender = GameTime;
        GameTime.TogglePause.OnNext(command);
    }
    
    public virtual void ExecuteGameTick(GameTickCommand command) {
        command.Sender = GameTime;
        GameTime.GameTick.OnNext(command);
    }
    
    public virtual void ExecuteGameTick(GameTick arg) {
        GameTime.GameTick.OnNext(new GameTickCommand() { Sender = GameTime, Argument = arg });
    }
}

public class GameLogicUIViewBase : uFrame.MVVM.ViewBase {
    
    [UFToggleGroup("StartGame")]
    [UnityEngine.HideInInspector()]
    public bool _BindStartGame = true;
    
    [UFGroup("StartGame")]
    [UnityEngine.SerializeField()]
    [UnityEngine.HideInInspector()]
    [UnityEngine.Serialization.FormerlySerializedAsAttribute("_StartGamebutton")]
    protected UnityEngine.UI.Button _StartGameButton;
    
    public override string DefaultIdentifier {
        get {
            return base.DefaultIdentifier;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(GameLogicViewModel);
        }
    }
    
    public GameLogicViewModel GameLogic {
        get {
            return (GameLogicViewModel)ViewModelObject;
        }
    }
    
    protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
        base.InitializeViewModel(model);
        // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
        // var vm = model as GameLogicViewModel;
        // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
    }
    
    public override void Bind() {
        base.Bind();
        // Use this.GameLogic to access the viewmodel.
        // Use this method to subscribe to the view-model.
        // Any designer bindings are created in the base implementation.
        if (_BindStartGame) {
            this.BindButtonToCommand(_StartGameButton, this.GameLogic.StartGame);
        }
    }
    
    public virtual void ExecuteStartGame() {
        GameLogic.StartGame.OnNext(new StartGameCommand() { Sender = GameLogic });
    }
    
    public virtual void ExecuteStartGame(StartGameCommand command) {
        command.Sender = GameLogic;
        GameLogic.StartGame.OnNext(command);
    }
}

public class GameLogicViewBase : uFrame.MVVM.ViewBase {
    
    public override string DefaultIdentifier {
        get {
            return base.DefaultIdentifier;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(GameLogicViewModel);
        }
    }
    
    public GameLogicViewModel GameLogic {
        get {
            return (GameLogicViewModel)ViewModelObject;
        }
    }
    
    protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
        base.InitializeViewModel(model);
        // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
        // var vm = model as GameLogicViewModel;
        // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
    }
    
    public override void Bind() {
        base.Bind();
        // Use this.GameLogic to access the viewmodel.
        // Use this method to subscribe to the view-model.
        // Any designer bindings are created in the base implementation.
    }
    
    public virtual void ExecuteStartGame() {
        GameLogic.StartGame.OnNext(new StartGameCommand() { Sender = GameLogic });
    }
    
    public virtual void ExecuteStartGame(StartGameCommand command) {
        command.Sender = GameLogic;
        GameLogic.StartGame.OnNext(command);
    }
}

public class GameTimeViewBase : uFrame.MVVM.ViewBase {
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Year;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Month;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Day;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Seasons _Season;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _GameSpeed;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _Paused;
    
    public override string DefaultIdentifier {
        get {
            return base.DefaultIdentifier;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(GameTimeViewModel);
        }
    }
    
    public GameTimeViewModel GameTime {
        get {
            return (GameTimeViewModel)ViewModelObject;
        }
    }
    
    protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
        base.InitializeViewModel(model);
        // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
        // var vm = model as GameTimeViewModel;
        // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
        var gametimeview = ((GameTimeViewModel)model);
        gametimeview.Year = this._Year;
        gametimeview.Month = this._Month;
        gametimeview.Day = this._Day;
        gametimeview.Season = this._Season;
        gametimeview.GameSpeed = this._GameSpeed;
        gametimeview.Paused = this._Paused;
    }
    
    public override void Bind() {
        base.Bind();
        // Use this.GameTime to access the viewmodel.
        // Use this method to subscribe to the view-model.
        // Any designer bindings are created in the base implementation.
    }
    
    public virtual void ExecuteIncreaseGameSpeed() {
        GameTime.IncreaseGameSpeed.OnNext(new IncreaseGameSpeedCommand() { Sender = GameTime });
    }
    
    public virtual void ExecuteDecreaseGameSpeed() {
        GameTime.DecreaseGameSpeed.OnNext(new DecreaseGameSpeedCommand() { Sender = GameTime });
    }
    
    public virtual void ExecuteTogglePause() {
        GameTime.TogglePause.OnNext(new TogglePauseCommand() { Sender = GameTime });
    }
    
    public virtual void ExecuteIncreaseGameSpeed(IncreaseGameSpeedCommand command) {
        command.Sender = GameTime;
        GameTime.IncreaseGameSpeed.OnNext(command);
    }
    
    public virtual void ExecuteDecreaseGameSpeed(DecreaseGameSpeedCommand command) {
        command.Sender = GameTime;
        GameTime.DecreaseGameSpeed.OnNext(command);
    }
    
    public virtual void ExecuteTogglePause(TogglePauseCommand command) {
        command.Sender = GameTime;
        GameTime.TogglePause.OnNext(command);
    }
    
    public virtual void ExecuteGameTick(GameTickCommand command) {
        command.Sender = GameTime;
        GameTime.GameTick.OnNext(command);
    }
    
    public virtual void ExecuteGameTick(GameTick arg) {
        GameTime.GameTick.OnNext(new GameTickCommand() { Sender = GameTime, Argument = arg });
    }
}
